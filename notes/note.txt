================== karpenter 

kubectl logs -f deployment/karpenter -n kube-system

helm registry logout public.ecr.aws

================ aws 

aws eks update-kubeconfig --region ap-southeast-1 --name tool-cluster-dev

aws eks update-kubeconfig --region ap-southeast-1 --name shoeshop-cluster-dev

aws secretsmanager delete-secret --secret-id tool-cluster-dev-general-secret --force-delete-without-recovery

aws configure

{"REDIS_ADDR":"redis-master.redis.svc.cluster.local:6379","PRODUCT_CATALOG_SERVICE_ADDR":"productcatalogservice.online-boutique.svc.cluster.local:80","SHIPPING_SERVICE_ADDR":"shippingservice.online-boutique.svc.cluster.local:80","PAYMENT_SERVICE_ADDR":"paymentservice.online-boutique.svc.cluster.local:80","EMAIL_SERVICE_ADDR":"emailservice.online-boutique.svc.cluster.local:80","CURRENCY_SERVICE_ADDR":"currencyservice.online-boutique.svc.cluster.local:80","CART_SERVICE_ADDR":"cartservice.online-boutique.svc.cluster.local:80","DISABLE_PROFILER":"1","AD_SERVICE_ADDR":"adservice.online-boutique.svc.cluster.local:80","RECOMMENDATION_SERVICE_ADDR":"recommendationservice.online-boutique.svc.cluster.local:80","CHECKOUT_SERVICE_ADDR":"checkoutservice.online-boutique.svc.cluster.local:80"}

aws eks describe-cluster --name tool-cluster-dev --region ap-southeast-1 --query "cluster.identity.oidc.issuer" --output text

================ vpc-cni 

kubectl set env daemonset aws-node -n kube-system ENABLE_PREFIX_DELEGATION=true

kubectl set env ds aws-node -n kube-system WARM_PREFIX_TARGET=1

kubectl set env ds aws-node -n kube-system WARM_IP_TARGET=5

kubectl set env ds aws-node -n kube-system MINIMUM_IP_TARGET=5

================ ebs-csi 

kubectl logs -f deployment/ebs-csi-controller -n kube-system

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gp3-waitforfirstcustomer
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer
parameters:
  type: gp3
  encrypted: "true"
allowVolumeExpansion: true

================= ECR 

aws ecr get-login-password --region ap-southeast-1

kubectl create secret docker-registry ecr-credentials \
  --docker-server=418295694191.dkr.ecr.ap-southeast-1.amazonaws.com \
  --docker-username=AWS \
  --docker-password=$(aws ecr get-login-password --region ap-southeast-1) \
  --namespace=default

kubectl create ns online-boutique 

kubectl create secret docker-registry ecr-credentials --docker-server=418295694191.dkr.ecr.ap-southeast-1.amazonaws.com --docker-username=AWS --docker-password=$(aws ecr get-login-password --region ap-southeast-1) --namespace=online-boutique

kubectl create secret docker-registry ecr-credentials --docker-server=418295694191.dkr.ecr.ap-southeast-1.amazonaws.com --docker-username=AWS --docker-password=$(aws ecr get-login-password --region ap-southeast-1) --namespace=argocd



=============== argocd 

kubectl -n argocd get secret argocd-secret -o jsonpath="{.data.clearPassword}" | base64 -d

kubectl -n argocd get secret argocd-secret -o jsonpath="{.data.clearPassword}" | % { [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($_)) }

argocd login localhost:52367 --username admin --password YtTDooQrB8

kubectl -n argocd create secret generic git-credentials --from-literal=sshPrivateKey="$(cat ~/.ssh/id_rsa)"

====================== secret csi
# Cài đặt CRDs cho Volume Snapshots
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshotclasses.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshotcontents.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshots.yaml

============================ loki
aws s3api create-bucket --bucket loki-tools-cluster-chunks --region ap-southeast-1 --create-bucket-configuration LocationConstraint=ap-southeast-1

aws s3api create-bucket --bucket loki-tools-cluster-ruler --region ap-southeast-1 --create-bucket-configuration LocationConstraint=ap-southeast-1


cat << EOF | envsubst > loki-policy.json
{
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "s3:ListBucket",
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject"
                ],
                "Resource": [
                    "arn:aws:s3:::loki-06-10-2025",
                    "arn:aws:s3:::loki-06-10-2025/*"
                ]
            }
        ]
    }
}

aws iam create-policy --policy-name LokiS3Access --policy-document file://loki-policy.json

export POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='loki_bucket_policy'].Arn" --output text)

aws eks describe-cluster --name tool-cluster-dev --query "cluster.identity.oidc.issuer" --output text
