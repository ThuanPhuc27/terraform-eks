{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "3.2.471", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_356", "name": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions", "shortDescription": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "fullDescription": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "help": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions\nResource: module.karpenter.aws_iam_policy_document.v033"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-356"}, {"id": "CKV_AWS_39", "name": "Ensure Amazon EKS public endpoint disabled", "shortDescription": {"text": "Ensure Amazon EKS public endpoint disabled"}, "fullDescription": {"text": "Ensure Amazon EKS public endpoint disabled"}, "help": {"text": "Ensure Amazon EKS public endpoint disabled\nResource: module.eks.aws_eks_cluster.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-kubernetes-policies/bc-aws-kubernetes-2"}, {"id": "CKV_AWS_58", "name": "Ensure EKS Cluster has Secrets Encryption Enabled", "shortDescription": {"text": "Ensure EKS Cluster has Secrets Encryption Enabled"}, "fullDescription": {"text": "Ensure EKS Cluster has Secrets Encryption Enabled"}, "help": {"text": "Ensure EKS Cluster has Secrets Encryption Enabled\nResource: module.eks.aws_eks_cluster.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-kubernetes-policies/bc-aws-kubernetes-3"}, {"id": "CKV_AWS_38", "name": "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0", "shortDescription": {"text": "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0"}, "fullDescription": {"text": "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0"}, "help": {"text": "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0\nResource: module.eks.aws_eks_cluster.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-kubernetes-policies/bc-aws-kubernetes-1"}, {"id": "CKV_AWS_37", "name": "Ensure Amazon EKS control plane logging is enabled for all log types", "shortDescription": {"text": "Ensure Amazon EKS control plane logging is enabled for all log types"}, "fullDescription": {"text": "Ensure Amazon EKS control plane logging is enabled for all log types"}, "help": {"text": "Ensure Amazon EKS control plane logging is enabled for all log types\nResource: module.eks.aws_eks_cluster.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-kubernetes-policies/bc-aws-kubernetes-4"}, {"id": "CKV_AWS_338", "name": "Ensure CloudWatch log groups retains logs for at least 1 year", "shortDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "fullDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "help": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year\nResource: module.eks.aws_cloudwatch_log_group.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-338"}, {"id": "CKV_TF_1", "name": "Ensure Terraform module sources use a commit hash", "shortDescription": {"text": "Ensure Terraform module sources use a commit hash"}, "fullDescription": {"text": "Ensure Terraform module sources use a commit hash"}, "help": {"text": "Ensure Terraform module sources use a commit hash\nResource: module.eks.kms"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/supply-chain-policies/terraform-policies/ensure-terraform-module-sources-use-git-url-with-commit-hash-revision"}, {"id": "CKV_AWS_79", "name": "Ensure Instance Metadata Service Version 1 is not enabled", "shortDescription": {"text": "Ensure Instance Metadata Service Version 1 is not enabled"}, "fullDescription": {"text": "Ensure Instance Metadata Service Version 1 is not enabled"}, "help": {"text": "Ensure Instance Metadata Service Version 1 is not enabled\nResource: module.eks.module.eks_managed_node_group.aws_launch_template.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-general-31"}, {"id": "CKV_AWS_341", "name": "Ensure Launch template should not have a metadata response hop limit greater than 1", "shortDescription": {"text": "Ensure Launch template should not have a metadata response hop limit greater than 1"}, "fullDescription": {"text": "Ensure Launch template should not have a metadata response hop limit greater than 1"}, "help": {"text": "Ensure Launch template should not have a metadata response hop limit greater than 1\nResource: module.eks.module.eks_managed_node_group.aws_launch_template.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/bc-aws-341"}, {"id": "CKV_AWS_111", "name": "Ensure IAM policies does not allow write access without constraints", "shortDescription": {"text": "Ensure IAM policies does not allow write access without constraints"}, "fullDescription": {"text": "Ensure IAM policies does not allow write access without constraints"}, "help": {"text": "Ensure IAM policies does not allow write access without constraints\nResource: module.eks.aws_iam_policy_document.cni_ipv6_policy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/ensure-iam-policies-do-not-allow-write-access-without-constraint"}, {"id": "CKV_AWS_290", "name": "Ensure IAM policies does not allow write access without constraints", "shortDescription": {"text": "Ensure IAM policies does not allow write access without constraints"}, "fullDescription": {"text": "Ensure IAM policies does not allow write access without constraints"}, "help": {"text": "Ensure IAM policies does not allow write access without constraints\nResource: aws_iam_role_policy.eks_alb_ingress_policy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-290"}, {"id": "CKV_AWS_355", "name": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions", "shortDescription": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "fullDescription": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "help": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions\nResource: aws_iam_role_policy.eks_alb_ingress_policy"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-iam-policies/bc-aws-355"}, {"id": "CKV2_AWS_5", "name": "Ensure that Security Groups are attached to another resource", "shortDescription": {"text": "Ensure that Security Groups are attached to another resource"}, "fullDescription": {"text": "Ensure that Security Groups are attached to another resource"}, "help": {"text": "Ensure that Security Groups are attached to another resource\nResource: module.eks.aws_security_group.cluster[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-that-security-groups-are-attached-to-ec2-instances-or-elastic-network-interfaces-enis"}, {"id": "CKV2_AWS_11", "name": "Ensure VPC flow logging is enabled in all VPCs", "shortDescription": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "fullDescription": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "help": {"text": "Ensure VPC flow logging is enabled in all VPCs\nResource: module.vpc.aws_vpc.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/logging-9-enable-vpc-flow-logging"}, {"id": "CKV2_AWS_19", "name": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances", "shortDescription": {"text": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances"}, "fullDescription": {"text": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances"}, "help": {"text": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances\nResource: module.vpc.aws_eip.nat[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-that-all-eip-addresses-allocated-to-a-vpc-are-attached-to-ec2-instances"}, {"id": "CKV2_AWS_12", "name": "Ensure the default security group of every VPC restricts all traffic", "shortDescription": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "fullDescription": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "help": {"text": "Ensure the default security group of every VPC restricts all traffic\nResource: module.vpc.aws_vpc.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-4"}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_356", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/89af98d7000ac7e80b61865ba5e5c212ea011938/modules/karpenter/policy.tf"}, "region": {"startLine": 5, "endLine": 348, "snippet": {"text": "data \"aws_iam_policy_document\" \"v033\" {\n  count = local.create_iam_role ? 1 : 0\n\n  statement {\n    sid = \"AllowScopedEC2InstanceActions\"\n    resources = [\n      \"arn:${local.partition}:ec2:*::image/*\",\n      \"arn:${local.partition}:ec2:*::snapshot/*\",\n      \"arn:${local.partition}:ec2:*:*:spot-instances-request/*\",\n      \"arn:${local.partition}:ec2:*:*:security-group/*\",\n      \"arn:${local.partition}:ec2:*:*:subnet/*\",\n      \"arn:${local.partition}:ec2:*:*:launch-template/*\",\n    ]\n\n    actions = [\n      \"ec2:RunInstances\",\n      \"ec2:CreateFleet\"\n    ]\n  }\n\n  statement {\n    sid = \"AllowScopedEC2InstanceActionsWithTags\"\n    resources = [\n      \"arn:${local.partition}:ec2:*:*:fleet/*\",\n      \"arn:${local.partition}:ec2:*:*:instance/*\",\n      \"arn:${local.partition}:ec2:*:*:volume/*\",\n      \"arn:${local.partition}:ec2:*:*:network-interface/*\",\n      \"arn:${local.partition}:ec2:*:*:launch-template/*\",\n      \"arn:${local.partition}:ec2:*:*:spot-instances-request/*\",\n    ]\n    actions = [\n      \"ec2:RunInstances\",\n      \"ec2:CreateFleet\",\n      \"ec2:CreateLaunchTemplate\"\n    ]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:RequestTag/kubernetes.io/cluster/${var.cluster_name}\"\n      values   = [\"owned\"]\n    }\n\n    condition {\n      test     = \"StringLike\"\n      variable = \"aws:RequestTag/karpenter.sh/nodepool\"\n      values   = [\"*\"]\n    }\n  }\n\n  statement {\n    sid = \"AllowScopedResourceCreationTagging\"\n    resources = [\n      \"arn:${local.partition}:ec2:*:*:fleet/*\",\n      \"arn:${local.partition}:ec2:*:*:instance/*\",\n      \"arn:${local.partition}:ec2:*:*:volume/*\",\n      \"arn:${local.partition}:ec2:*:*:network-interface/*\",\n      \"arn:${local.partition}:ec2:*:*:launch-template/*\",\n      \"arn:${local.partition}:ec2:*:*:spot-instances-request/*\",\n    ]\n    actions = [\"ec2:CreateTags\"]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:RequestTag/kubernetes.io/cluster/${var.cluster_name}\"\n      values   = [\"owned\"]\n    }\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"ec2:CreateAction\"\n      values = [\n        \"RunInstances\",\n        \"CreateFleet\",\n        \"CreateLaunchTemplate\",\n      ]\n    }\n\n    condition {\n      test     = \"StringLike\"\n      variable = \"aws:RequestTag/karpenter.sh/nodepool\"\n      values   = [\"*\"]\n    }\n  }\n\n  statement {\n    sid       = \"AllowScopedResourceTagging\"\n    resources = [\"arn:${local.partition}:ec2:*:*:instance/*\"]\n    actions   = [\"ec2:CreateTags\"]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:ResourceTag/kubernetes.io/cluster/${var.cluster_name}\"\n      values   = [\"owned\"]\n    }\n\n    condition {\n      test     = \"StringLike\"\n      variable = \"aws:ResourceTag/karpenter.sh/nodepool\"\n      values   = [\"*\"]\n    }\n\n    condition {\n      test     = \"ForAllValues:StringEquals\"\n      variable = \"aws:TagKeys\"\n      values = [\n        \"karpenter.sh/nodeclaim\",\n        \"Name\",\n      ]\n    }\n  }\n\n  statement {\n    sid = \"AllowScopedDeletion\"\n    resources = [\n      \"arn:${local.partition}:ec2:*:*:instance/*\",\n      \"arn:${local.partition}:ec2:*:*:launch-template/*\"\n    ]\n\n    actions = [\n      \"ec2:TerminateInstances\",\n      \"ec2:DeleteLaunchTemplate\"\n    ]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:ResourceTag/kubernetes.io/cluster/${var.cluster_name}\"\n      values   = [\"owned\"]\n    }\n\n    condition {\n      test     = \"StringLike\"\n      variable = \"aws:ResourceTag/karpenter.sh/nodepool\"\n      values   = [\"*\"]\n    }\n  }\n\n  statement {\n    sid       = \"AllowRegionalReadActions\"\n    resources = [\"*\"]\n    actions = [\n      \"ec2:DescribeAvailabilityZones\",\n      \"ec2:DescribeImages\",\n      \"ec2:DescribeInstances\",\n      \"ec2:DescribeInstanceTypeOfferings\",\n      \"ec2:DescribeInstanceTypes\",\n      \"ec2:DescribeLaunchTemplates\",\n      \"ec2:DescribeSecurityGroups\",\n      \"ec2:DescribeSpotPriceHistory\",\n      \"ec2:DescribeSubnets\"\n    ]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:RequestedRegion\"\n      values   = [local.region]\n    }\n  }\n\n  statement {\n    sid       = \"AllowSSMReadActions\"\n    resources = coalescelist(var.ami_id_ssm_parameter_arns, [\"arn:${local.partition}:ssm:${local.region}::parameter/aws/service/*\"])\n    actions   = [\"ssm:GetParameter\"]\n  }\n\n  statement {\n    sid       = \"AllowPricingReadActions\"\n    resources = [\"*\"]\n    actions   = [\"pricing:GetProducts\"]\n  }\n\n  dynamic \"statement\" {\n    for_each = local.enable_spot_termination ? [1] : []\n\n    content {\n      sid       = \"AllowInterruptionQueueActions\"\n      resources = [try(aws_sqs_queue.this[0].arn, null)]\n      actions = [\n        \"sqs:DeleteMessage\",\n        \"sqs:GetQueueAttributes\",\n        \"sqs:GetQueueUrl\",\n        \"sqs:ReceiveMessage\"\n      ]\n    }\n  }\n\n  statement {\n    sid       = \"AllowPassingInstanceRole\"\n    resources = var.create_node_iam_role ? [aws_iam_role.node[0].arn] : [var.node_iam_role_arn]\n    actions   = [\"iam:PassRole\"]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"iam:PassedToService\"\n      values   = [\"ec2.${local.dns_suffix}\"]\n    }\n  }\n\n  statement {\n    sid       = \"AllowScopedInstanceProfileCreationActions\"\n    resources = [\"*\"]\n    actions   = [\"iam:CreateInstanceProfile\"]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:RequestTag/kubernetes.io/cluster/${var.cluster_name}\"\n      values   = [\"owned\"]\n    }\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:RequestTag/topology.kubernetes.io/region\"\n      values   = [local.region]\n    }\n\n    condition {\n      test     = \"StringLike\"\n      variable = \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\"\n      values   = [\"*\"]\n    }\n  }\n\n  statement {\n    sid       = \"AllowScopedInstanceProfileTagActions\"\n    resources = [\"*\"]\n    actions   = [\"iam:TagInstanceProfile\"]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:ResourceTag/kubernetes.io/cluster/${var.cluster_name}\"\n      values   = [\"owned\"]\n    }\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:ResourceTag/topology.kubernetes.io/region\"\n      values   = [local.region]\n    }\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:RequestTag/kubernetes.io/cluster/${var.cluster_name}\"\n      values   = [\"owned\"]\n    }\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:ResourceTag/topology.kubernetes.io/region\"\n      values   = [local.region]\n    }\n\n    condition {\n      test     = \"StringLike\"\n      variable = \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\"\n      values   = [\"*\"]\n    }\n\n    condition {\n      test     = \"StringLike\"\n      variable = \"aws:RequestTag/karpenter.k8s.aws/ec2nodeclass\"\n      values   = [\"*\"]\n    }\n  }\n\n  statement {\n    sid       = \"AllowScopedInstanceProfileActions\"\n    resources = [\"*\"]\n    actions = [\n      \"iam:AddRoleToInstanceProfile\",\n      \"iam:RemoveRoleFromInstanceProfile\",\n      \"iam:DeleteInstanceProfile\"\n    ]\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:ResourceTag/kubernetes.io/cluster/${var.cluster_name}\"\n      values   = [\"owned\"]\n    }\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"aws:ResourceTag/topology.kubernetes.io/region\"\n      values   = [local.region]\n    }\n\n    condition {\n      test     = \"StringLike\"\n      variable = \"aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass\"\n      values   = [\"*\"]\n    }\n  }\n\n  statement {\n    sid       = \"AllowInstanceProfileReadActions\"\n    resources = [\"*\"]\n    actions   = [\"iam:GetInstanceProfile\"]\n  }\n\n  statement {\n    sid       = \"AllowAPIServerEndpointDiscovery\"\n    resources = [\"arn:${local.partition}:eks:${local.region}:${local.account_id}:cluster/${var.cluster_name}\"]\n    actions   = [\"eks:DescribeCluster\"]\n  }\n\n  dynamic \"statement\" {\n    for_each = var.iam_policy_statements\n\n    content {\n      sid           = try(statement.value.sid, null)\n      actions       = try(statement.value.actions, null)\n      not_actions   = try(statement.value.not_actions, null)\n      effect        = try(statement.value.effect, null)\n      resources     = try(statement.value.resources, null)\n      not_resources = try(statement.value.not_resources, null)\n\n      dynamic \"principals\" {\n        for_each = try(statement.value.principals, [])\n\n        content {\n          type        = principals.value.type\n          identifiers = principals.value.identifiers\n        }\n      }\n\n      dynamic \"not_principals\" {\n        for_each = try(statement.value.not_principals, [])\n\n        content {\n          type        = not_principals.value.type\n          identifiers = not_principals.value.identifiers\n        }\n      }\n\n      dynamic \"condition\" {\n        for_each = try(statement.value.conditions, [])\n\n        content {\n          test     = condition.value.test\n          values   = condition.value.values\n          variable = condition.value.variable\n        }\n      }\n    }\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_39", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure Amazon EKS public endpoint disabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/main.tf"}, "region": {"startLine": 27, "endLine": 120, "snippet": {"text": "resource \"aws_eks_cluster\" \"this\" {\n  count = local.create ? 1 : 0\n\n  name                          = var.cluster_name\n  role_arn                      = local.cluster_role\n  version                       = var.cluster_version\n  enabled_cluster_log_types     = var.cluster_enabled_log_types\n  bootstrap_self_managed_addons = var.bootstrap_self_managed_addons\n\n  access_config {\n    authentication_mode = var.authentication_mode\n\n    # See access entries below - this is a one time operation from the EKS API.\n    # Instead, we are hardcoding this to false and if users wish to achieve this\n    # same functionality, we will do that through an access entry which can be\n    # enabled or disabled at any time of their choosing using the variable\n    # var.enable_cluster_creator_admin_permissions\n    bootstrap_cluster_creator_admin_permissions = false\n  }\n\n  vpc_config {\n    security_group_ids      = compact(distinct(concat(var.cluster_additional_security_group_ids, [local.cluster_security_group_id])))\n    subnet_ids              = coalescelist(var.control_plane_subnet_ids, var.subnet_ids)\n    endpoint_private_access = var.cluster_endpoint_private_access\n    endpoint_public_access  = var.cluster_endpoint_public_access\n    public_access_cidrs     = var.cluster_endpoint_public_access_cidrs\n  }\n\n  dynamic \"kubernetes_network_config\" {\n    # Not valid on Outposts\n    for_each = local.create_outposts_local_cluster ? [] : [1]\n\n    content {\n      ip_family         = var.cluster_ip_family\n      service_ipv4_cidr = var.cluster_service_ipv4_cidr\n      service_ipv6_cidr = var.cluster_service_ipv6_cidr\n    }\n  }\n\n  dynamic \"outpost_config\" {\n    for_each = local.create_outposts_local_cluster ? [var.outpost_config] : []\n\n    content {\n      control_plane_instance_type = outpost_config.value.control_plane_instance_type\n      outpost_arns                = outpost_config.value.outpost_arns\n    }\n  }\n\n  dynamic \"encryption_config\" {\n    # Not available on Outposts\n    for_each = local.enable_cluster_encryption_config ? [var.cluster_encryption_config] : []\n\n    content {\n      provider {\n        key_arn = var.create_kms_key ? module.kms.key_arn : encryption_config.value.provider_key_arn\n      }\n      resources = encryption_config.value.resources\n    }\n  }\n\n  dynamic \"upgrade_policy\" {\n    for_each = length(var.cluster_upgrade_policy) > 0 ? [var.cluster_upgrade_policy] : []\n\n    content {\n      support_type = try(upgrade_policy.value.support_type, null)\n    }\n  }\n\n  tags = merge(\n    { terraform-aws-modules = \"eks\" },\n    var.tags,\n    var.cluster_tags,\n  )\n\n  timeouts {\n    create = try(var.cluster_timeouts.create, null)\n    update = try(var.cluster_timeouts.update, null)\n    delete = try(var.cluster_timeouts.delete, null)\n  }\n\n  depends_on = [\n    aws_iam_role_policy_attachment.this,\n    aws_security_group_rule.cluster,\n    aws_security_group_rule.node,\n    aws_cloudwatch_log_group.this,\n    aws_iam_policy.cni_ipv6_policy,\n  ]\n\n  lifecycle {\n    ignore_changes = [\n      access_config[0].bootstrap_cluster_creator_admin_permissions\n    ]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_58", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure EKS Cluster has Secrets Encryption Enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/main.tf"}, "region": {"startLine": 27, "endLine": 120, "snippet": {"text": "resource \"aws_eks_cluster\" \"this\" {\n  count = local.create ? 1 : 0\n\n  name                          = var.cluster_name\n  role_arn                      = local.cluster_role\n  version                       = var.cluster_version\n  enabled_cluster_log_types     = var.cluster_enabled_log_types\n  bootstrap_self_managed_addons = var.bootstrap_self_managed_addons\n\n  access_config {\n    authentication_mode = var.authentication_mode\n\n    # See access entries below - this is a one time operation from the EKS API.\n    # Instead, we are hardcoding this to false and if users wish to achieve this\n    # same functionality, we will do that through an access entry which can be\n    # enabled or disabled at any time of their choosing using the variable\n    # var.enable_cluster_creator_admin_permissions\n    bootstrap_cluster_creator_admin_permissions = false\n  }\n\n  vpc_config {\n    security_group_ids      = compact(distinct(concat(var.cluster_additional_security_group_ids, [local.cluster_security_group_id])))\n    subnet_ids              = coalescelist(var.control_plane_subnet_ids, var.subnet_ids)\n    endpoint_private_access = var.cluster_endpoint_private_access\n    endpoint_public_access  = var.cluster_endpoint_public_access\n    public_access_cidrs     = var.cluster_endpoint_public_access_cidrs\n  }\n\n  dynamic \"kubernetes_network_config\" {\n    # Not valid on Outposts\n    for_each = local.create_outposts_local_cluster ? [] : [1]\n\n    content {\n      ip_family         = var.cluster_ip_family\n      service_ipv4_cidr = var.cluster_service_ipv4_cidr\n      service_ipv6_cidr = var.cluster_service_ipv6_cidr\n    }\n  }\n\n  dynamic \"outpost_config\" {\n    for_each = local.create_outposts_local_cluster ? [var.outpost_config] : []\n\n    content {\n      control_plane_instance_type = outpost_config.value.control_plane_instance_type\n      outpost_arns                = outpost_config.value.outpost_arns\n    }\n  }\n\n  dynamic \"encryption_config\" {\n    # Not available on Outposts\n    for_each = local.enable_cluster_encryption_config ? [var.cluster_encryption_config] : []\n\n    content {\n      provider {\n        key_arn = var.create_kms_key ? module.kms.key_arn : encryption_config.value.provider_key_arn\n      }\n      resources = encryption_config.value.resources\n    }\n  }\n\n  dynamic \"upgrade_policy\" {\n    for_each = length(var.cluster_upgrade_policy) > 0 ? [var.cluster_upgrade_policy] : []\n\n    content {\n      support_type = try(upgrade_policy.value.support_type, null)\n    }\n  }\n\n  tags = merge(\n    { terraform-aws-modules = \"eks\" },\n    var.tags,\n    var.cluster_tags,\n  )\n\n  timeouts {\n    create = try(var.cluster_timeouts.create, null)\n    update = try(var.cluster_timeouts.update, null)\n    delete = try(var.cluster_timeouts.delete, null)\n  }\n\n  depends_on = [\n    aws_iam_role_policy_attachment.this,\n    aws_security_group_rule.cluster,\n    aws_security_group_rule.node,\n    aws_cloudwatch_log_group.this,\n    aws_iam_policy.cni_ipv6_policy,\n  ]\n\n  lifecycle {\n    ignore_changes = [\n      access_config[0].bootstrap_cluster_creator_admin_permissions\n    ]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_38", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure Amazon EKS public endpoint not accessible to 0.0.0.0/0"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/main.tf"}, "region": {"startLine": 27, "endLine": 120, "snippet": {"text": "resource \"aws_eks_cluster\" \"this\" {\n  count = local.create ? 1 : 0\n\n  name                          = var.cluster_name\n  role_arn                      = local.cluster_role\n  version                       = var.cluster_version\n  enabled_cluster_log_types     = var.cluster_enabled_log_types\n  bootstrap_self_managed_addons = var.bootstrap_self_managed_addons\n\n  access_config {\n    authentication_mode = var.authentication_mode\n\n    # See access entries below - this is a one time operation from the EKS API.\n    # Instead, we are hardcoding this to false and if users wish to achieve this\n    # same functionality, we will do that through an access entry which can be\n    # enabled or disabled at any time of their choosing using the variable\n    # var.enable_cluster_creator_admin_permissions\n    bootstrap_cluster_creator_admin_permissions = false\n  }\n\n  vpc_config {\n    security_group_ids      = compact(distinct(concat(var.cluster_additional_security_group_ids, [local.cluster_security_group_id])))\n    subnet_ids              = coalescelist(var.control_plane_subnet_ids, var.subnet_ids)\n    endpoint_private_access = var.cluster_endpoint_private_access\n    endpoint_public_access  = var.cluster_endpoint_public_access\n    public_access_cidrs     = var.cluster_endpoint_public_access_cidrs\n  }\n\n  dynamic \"kubernetes_network_config\" {\n    # Not valid on Outposts\n    for_each = local.create_outposts_local_cluster ? [] : [1]\n\n    content {\n      ip_family         = var.cluster_ip_family\n      service_ipv4_cidr = var.cluster_service_ipv4_cidr\n      service_ipv6_cidr = var.cluster_service_ipv6_cidr\n    }\n  }\n\n  dynamic \"outpost_config\" {\n    for_each = local.create_outposts_local_cluster ? [var.outpost_config] : []\n\n    content {\n      control_plane_instance_type = outpost_config.value.control_plane_instance_type\n      outpost_arns                = outpost_config.value.outpost_arns\n    }\n  }\n\n  dynamic \"encryption_config\" {\n    # Not available on Outposts\n    for_each = local.enable_cluster_encryption_config ? [var.cluster_encryption_config] : []\n\n    content {\n      provider {\n        key_arn = var.create_kms_key ? module.kms.key_arn : encryption_config.value.provider_key_arn\n      }\n      resources = encryption_config.value.resources\n    }\n  }\n\n  dynamic \"upgrade_policy\" {\n    for_each = length(var.cluster_upgrade_policy) > 0 ? [var.cluster_upgrade_policy] : []\n\n    content {\n      support_type = try(upgrade_policy.value.support_type, null)\n    }\n  }\n\n  tags = merge(\n    { terraform-aws-modules = \"eks\" },\n    var.tags,\n    var.cluster_tags,\n  )\n\n  timeouts {\n    create = try(var.cluster_timeouts.create, null)\n    update = try(var.cluster_timeouts.update, null)\n    delete = try(var.cluster_timeouts.delete, null)\n  }\n\n  depends_on = [\n    aws_iam_role_policy_attachment.this,\n    aws_security_group_rule.cluster,\n    aws_security_group_rule.node,\n    aws_cloudwatch_log_group.this,\n    aws_iam_policy.cni_ipv6_policy,\n  ]\n\n  lifecycle {\n    ignore_changes = [\n      access_config[0].bootstrap_cluster_creator_admin_permissions\n    ]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_37", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure Amazon EKS control plane logging is enabled for all log types"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/main.tf"}, "region": {"startLine": 27, "endLine": 120, "snippet": {"text": "resource \"aws_eks_cluster\" \"this\" {\n  count = local.create ? 1 : 0\n\n  name                          = var.cluster_name\n  role_arn                      = local.cluster_role\n  version                       = var.cluster_version\n  enabled_cluster_log_types     = var.cluster_enabled_log_types\n  bootstrap_self_managed_addons = var.bootstrap_self_managed_addons\n\n  access_config {\n    authentication_mode = var.authentication_mode\n\n    # See access entries below - this is a one time operation from the EKS API.\n    # Instead, we are hardcoding this to false and if users wish to achieve this\n    # same functionality, we will do that through an access entry which can be\n    # enabled or disabled at any time of their choosing using the variable\n    # var.enable_cluster_creator_admin_permissions\n    bootstrap_cluster_creator_admin_permissions = false\n  }\n\n  vpc_config {\n    security_group_ids      = compact(distinct(concat(var.cluster_additional_security_group_ids, [local.cluster_security_group_id])))\n    subnet_ids              = coalescelist(var.control_plane_subnet_ids, var.subnet_ids)\n    endpoint_private_access = var.cluster_endpoint_private_access\n    endpoint_public_access  = var.cluster_endpoint_public_access\n    public_access_cidrs     = var.cluster_endpoint_public_access_cidrs\n  }\n\n  dynamic \"kubernetes_network_config\" {\n    # Not valid on Outposts\n    for_each = local.create_outposts_local_cluster ? [] : [1]\n\n    content {\n      ip_family         = var.cluster_ip_family\n      service_ipv4_cidr = var.cluster_service_ipv4_cidr\n      service_ipv6_cidr = var.cluster_service_ipv6_cidr\n    }\n  }\n\n  dynamic \"outpost_config\" {\n    for_each = local.create_outposts_local_cluster ? [var.outpost_config] : []\n\n    content {\n      control_plane_instance_type = outpost_config.value.control_plane_instance_type\n      outpost_arns                = outpost_config.value.outpost_arns\n    }\n  }\n\n  dynamic \"encryption_config\" {\n    # Not available on Outposts\n    for_each = local.enable_cluster_encryption_config ? [var.cluster_encryption_config] : []\n\n    content {\n      provider {\n        key_arn = var.create_kms_key ? module.kms.key_arn : encryption_config.value.provider_key_arn\n      }\n      resources = encryption_config.value.resources\n    }\n  }\n\n  dynamic \"upgrade_policy\" {\n    for_each = length(var.cluster_upgrade_policy) > 0 ? [var.cluster_upgrade_policy] : []\n\n    content {\n      support_type = try(upgrade_policy.value.support_type, null)\n    }\n  }\n\n  tags = merge(\n    { terraform-aws-modules = \"eks\" },\n    var.tags,\n    var.cluster_tags,\n  )\n\n  timeouts {\n    create = try(var.cluster_timeouts.create, null)\n    update = try(var.cluster_timeouts.update, null)\n    delete = try(var.cluster_timeouts.delete, null)\n  }\n\n  depends_on = [\n    aws_iam_role_policy_attachment.this,\n    aws_security_group_rule.cluster,\n    aws_security_group_rule.node,\n    aws_cloudwatch_log_group.this,\n    aws_iam_policy.cni_ipv6_policy,\n  ]\n\n  lifecycle {\n    ignore_changes = [\n      access_config[0].bootstrap_cluster_creator_admin_permissions\n    ]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/main.tf"}, "region": {"startLine": 135, "endLine": 148, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"this\" {\n  count = local.create && var.create_cloudwatch_log_group ? 1 : 0\n\n  name              = \"/aws/eks/${var.cluster_name}/cluster\"\n  retention_in_days = var.cloudwatch_log_group_retention_in_days\n  kms_key_id        = var.cloudwatch_log_group_kms_key_id\n  log_group_class   = var.cloudwatch_log_group_class\n\n  tags = merge(\n    var.tags,\n    var.cloudwatch_log_group_tags,\n    { Name = \"/aws/eks/${var.cluster_name}/cluster\" }\n  )\n}\n"}}}}]}, {"ruleId": "CKV_TF_1", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure Terraform module sources use a commit hash"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/main.tf"}, "region": {"startLine": 234, "endLine": 265, "snippet": {"text": "module \"kms\" {\n  source  = \"terraform-aws-modules/kms/aws\"\n  version = \"2.1.0\" # Note - be mindful of Terraform/provider version compatibility between modules\n\n  create = local.create && var.create_kms_key && local.enable_cluster_encryption_config # not valid on Outposts\n\n  description             = coalesce(var.kms_key_description, \"${var.cluster_name} cluster encryption key\")\n  key_usage               = \"ENCRYPT_DECRYPT\"\n  deletion_window_in_days = var.kms_key_deletion_window_in_days\n  enable_key_rotation     = var.enable_kms_key_rotation\n\n  # Policy\n  enable_default_policy     = var.kms_key_enable_default_policy\n  key_owners                = var.kms_key_owners\n  key_administrators        = coalescelist(var.kms_key_administrators, [data.aws_iam_session_context.current.issuer_arn])\n  key_users                 = concat([local.cluster_role], var.kms_key_users)\n  key_service_users         = var.kms_key_service_users\n  source_policy_documents   = var.kms_key_source_policy_documents\n  override_policy_documents = var.kms_key_override_policy_documents\n\n  # Aliases\n  aliases = var.kms_key_aliases\n  computed_aliases = {\n    # Computed since users can pass in computed values for cluster name such as random provider resources\n    cluster = { name = \"eks/${var.cluster_name}\" }\n  }\n\n  tags = merge(\n    { terraform-aws-modules = \"eks\" },\n    var.tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV_AWS_79", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure Instance Metadata Service Version 1 is not enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/modules/eks-managed-node-group/main.tf"}, "region": {"startLine": 71, "endLine": 338, "snippet": {"text": "resource \"aws_launch_template\" \"this\" {\n  count = var.create && var.create_launch_template && var.use_custom_launch_template ? 1 : 0\n\n  dynamic \"block_device_mappings\" {\n    for_each = var.block_device_mappings\n\n    content {\n      device_name = try(block_device_mappings.value.device_name, null)\n\n      dynamic \"ebs\" {\n        for_each = try([block_device_mappings.value.ebs], [])\n\n        content {\n          delete_on_termination = try(ebs.value.delete_on_termination, null)\n          encrypted             = try(ebs.value.encrypted, null)\n          iops                  = try(ebs.value.iops, null)\n          kms_key_id            = try(ebs.value.kms_key_id, null)\n          snapshot_id           = try(ebs.value.snapshot_id, null)\n          throughput            = try(ebs.value.throughput, null)\n          volume_size           = try(ebs.value.volume_size, null)\n          volume_type           = try(ebs.value.volume_type, null)\n        }\n      }\n\n      no_device    = try(block_device_mappings.value.no_device, null)\n      virtual_name = try(block_device_mappings.value.virtual_name, null)\n    }\n  }\n\n  dynamic \"capacity_reservation_specification\" {\n    for_each = length(var.capacity_reservation_specification) > 0 ? [var.capacity_reservation_specification] : []\n\n    content {\n      capacity_reservation_preference = try(capacity_reservation_specification.value.capacity_reservation_preference, null)\n\n      dynamic \"capacity_reservation_target\" {\n        for_each = try([capacity_reservation_specification.value.capacity_reservation_target], [])\n\n        content {\n          capacity_reservation_id                 = try(capacity_reservation_target.value.capacity_reservation_id, null)\n          capacity_reservation_resource_group_arn = try(capacity_reservation_target.value.capacity_reservation_resource_group_arn, null)\n        }\n      }\n    }\n  }\n\n  dynamic \"cpu_options\" {\n    for_each = length(var.cpu_options) > 0 ? [var.cpu_options] : []\n\n    content {\n      core_count       = try(cpu_options.value.core_count, null)\n      threads_per_core = try(cpu_options.value.threads_per_core, null)\n    }\n  }\n\n  dynamic \"credit_specification\" {\n    for_each = length(var.credit_specification) > 0 ? [var.credit_specification] : []\n\n    content {\n      cpu_credits = try(credit_specification.value.cpu_credits, null)\n    }\n  }\n\n  default_version         = var.launch_template_default_version\n  description             = var.launch_template_description\n  disable_api_termination = var.disable_api_termination\n  ebs_optimized           = var.ebs_optimized\n\n  dynamic \"elastic_gpu_specifications\" {\n    for_each = var.elastic_gpu_specifications\n\n    content {\n      type = elastic_gpu_specifications.value.type\n    }\n  }\n\n  dynamic \"elastic_inference_accelerator\" {\n    for_each = length(var.elastic_inference_accelerator) > 0 ? [var.elastic_inference_accelerator] : []\n\n    content {\n      type = elastic_inference_accelerator.value.type\n    }\n  }\n\n  dynamic \"enclave_options\" {\n    for_each = length(var.enclave_options) > 0 ? [var.enclave_options] : []\n\n    content {\n      enabled = enclave_options.value.enabled\n    }\n  }\n\n  # Set on EKS managed node group, will fail if set here\n  # https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html#launch-template-basics\n  # dynamic \"hibernation_options\" {\n  #   for_each = length(var.hibernation_options) > 0 ? [var.hibernation_options] : []\n\n  #   content {\n  #     configured = hibernation_options.value.configured\n  #   }\n  # }\n\n  # Set on EKS managed node group, will fail if set here\n  # https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html#launch-template-basics\n  # dynamic \"iam_instance_profile\" {\n  #   for_each = [var.iam_instance_profile]\n  #   content {\n  #     name = lookup(var.iam_instance_profile, \"name\", null)\n  #     arn  = lookup(var.iam_instance_profile, \"arn\", null)\n  #   }\n  # }\n\n  image_id = var.ami_id\n  # Set on EKS managed node group, will fail if set here\n  # https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html#launch-template-basics\n  # instance_initiated_shutdown_behavior = var.instance_initiated_shutdown_behavior\n\n  dynamic \"instance_market_options\" {\n    for_each = length(var.instance_market_options) > 0 ? [var.instance_market_options] : []\n\n    content {\n      market_type = try(instance_market_options.value.market_type, null)\n\n      dynamic \"spot_options\" {\n        for_each = try([instance_market_options.value.spot_options], [])\n\n        content {\n          block_duration_minutes         = try(spot_options.value.block_duration_minutes, null)\n          instance_interruption_behavior = try(spot_options.value.instance_interruption_behavior, null)\n          max_price                      = try(spot_options.value.max_price, null)\n          spot_instance_type             = try(spot_options.value.spot_instance_type, null)\n          valid_until                    = try(spot_options.value.valid_until, null)\n        }\n      }\n    }\n  }\n\n  # Instance type(s) are generally set on the node group,\n  # except when a ML capacity block reseravtion is used\n  instance_type = var.capacity_type == \"CAPACITY_BLOCK\" ? element(var.instance_types, 0) : null\n  kernel_id     = var.kernel_id\n  key_name      = var.key_name\n\n  dynamic \"license_specification\" {\n    for_each = length(var.license_specifications) > 0 ? var.license_specifications : {}\n\n    content {\n      license_configuration_arn = license_specification.value.license_configuration_arn\n    }\n  }\n\n  dynamic \"maintenance_options\" {\n    for_each = length(var.maintenance_options) > 0 ? [var.maintenance_options] : []\n\n    content {\n      auto_recovery = try(maintenance_options.value.auto_recovery, null)\n    }\n  }\n\n  dynamic \"metadata_options\" {\n    for_each = length(var.metadata_options) > 0 ? [var.metadata_options] : []\n\n    content {\n      http_endpoint               = try(metadata_options.value.http_endpoint, null)\n      http_protocol_ipv6          = try(metadata_options.value.http_protocol_ipv6, null)\n      http_put_response_hop_limit = try(metadata_options.value.http_put_response_hop_limit, null)\n      http_tokens                 = try(metadata_options.value.http_tokens, null)\n      instance_metadata_tags      = try(metadata_options.value.instance_metadata_tags, null)\n    }\n  }\n\n  dynamic \"monitoring\" {\n    for_each = var.enable_monitoring ? [1] : []\n\n    content {\n      enabled = var.enable_monitoring\n    }\n  }\n\n  name        = var.launch_template_use_name_prefix ? null : local.launch_template_name\n  name_prefix = var.launch_template_use_name_prefix ? \"${local.launch_template_name}-\" : null\n\n  dynamic \"network_interfaces\" {\n    for_each = local.network_interfaces\n\n    content {\n      associate_carrier_ip_address = try(network_interfaces.value.associate_carrier_ip_address, null)\n      associate_public_ip_address  = try(network_interfaces.value.associate_public_ip_address, null)\n      delete_on_termination        = try(network_interfaces.value.delete_on_termination, null)\n      description                  = try(network_interfaces.value.description, null)\n      device_index                 = try(network_interfaces.value.device_index, null)\n      interface_type               = try(network_interfaces.value.interface_type, null)\n      ipv4_address_count           = try(network_interfaces.value.ipv4_address_count, null)\n      ipv4_addresses               = try(network_interfaces.value.ipv4_addresses, [])\n      ipv4_prefix_count            = try(network_interfaces.value.ipv4_prefix_count, null)\n      ipv4_prefixes                = try(network_interfaces.value.ipv4_prefixes, null)\n      ipv6_address_count           = try(network_interfaces.value.ipv6_address_count, null)\n      ipv6_addresses               = try(network_interfaces.value.ipv6_addresses, [])\n      ipv6_prefix_count            = try(network_interfaces.value.ipv6_prefix_count, null)\n      ipv6_prefixes                = try(network_interfaces.value.ipv6_prefixes, [])\n      network_card_index           = try(network_interfaces.value.network_card_index, null)\n      network_interface_id         = try(network_interfaces.value.network_interface_id, null)\n      primary_ipv6                 = try(network_interfaces.value.primary_ipv6, null)\n      private_ip_address           = try(network_interfaces.value.private_ip_address, null)\n      # Ref: https://github.com/hashicorp/terraform-provider-aws/issues/4570\n      security_groups = compact(concat(try(network_interfaces.value.security_groups, []), local.security_group_ids))\n      # Set on EKS managed node group, will fail if set here\n      # https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html#launch-template-basics\n      # subnet_id       = try(network_interfaces.value.subnet_id, null)\n    }\n  }\n\n  dynamic \"placement\" {\n    for_each = length(local.placement) > 0 ? [local.placement] : []\n\n    content {\n      affinity                = try(placement.value.affinity, null)\n      availability_zone       = lookup(placement.value, \"availability_zone\", null)\n      group_name              = lookup(placement.value, \"group_name\", null)\n      host_id                 = lookup(placement.value, \"host_id\", null)\n      host_resource_group_arn = lookup(placement.value, \"host_resource_group_arn\", null)\n      partition_number        = try(placement.value.partition_number, null)\n      spread_domain           = try(placement.value.spread_domain, null)\n      tenancy                 = try(placement.value.tenancy, null)\n    }\n  }\n\n  dynamic \"private_dns_name_options\" {\n    for_each = length(var.private_dns_name_options) > 0 ? [var.private_dns_name_options] : []\n\n    content {\n      enable_resource_name_dns_aaaa_record = try(private_dns_name_options.value.enable_resource_name_dns_aaaa_record, null)\n      enable_resource_name_dns_a_record    = try(private_dns_name_options.value.enable_resource_name_dns_a_record, null)\n      hostname_type                        = try(private_dns_name_options.value.hostname_type, null)\n    }\n  }\n\n  ram_disk_id = var.ram_disk_id\n\n  dynamic \"tag_specifications\" {\n    for_each = toset(var.tag_specifications)\n\n    content {\n      resource_type = tag_specifications.key\n      tags          = merge(var.tags, { Name = var.name }, var.launch_template_tags)\n    }\n  }\n\n  update_default_version = var.update_launch_template_default_version\n  user_data              = module.user_data.user_data\n  vpc_security_group_ids = length(local.network_interfaces) > 0 ? [] : local.security_group_ids\n\n  tags = merge(\n    var.tags,\n    var.launch_template_tags,\n  )\n\n  # Prevent premature access of policies by pods that\n  # require permissions on create/destroy that depend on nodes\n  depends_on = [\n    aws_iam_role_policy_attachment.this,\n    aws_iam_role_policy_attachment.additional,\n  ]\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_341", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure Launch template should not have a metadata response hop limit greater than 1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/modules/eks-managed-node-group/main.tf"}, "region": {"startLine": 71, "endLine": 338, "snippet": {"text": "resource \"aws_launch_template\" \"this\" {\n  count = var.create && var.create_launch_template && var.use_custom_launch_template ? 1 : 0\n\n  dynamic \"block_device_mappings\" {\n    for_each = var.block_device_mappings\n\n    content {\n      device_name = try(block_device_mappings.value.device_name, null)\n\n      dynamic \"ebs\" {\n        for_each = try([block_device_mappings.value.ebs], [])\n\n        content {\n          delete_on_termination = try(ebs.value.delete_on_termination, null)\n          encrypted             = try(ebs.value.encrypted, null)\n          iops                  = try(ebs.value.iops, null)\n          kms_key_id            = try(ebs.value.kms_key_id, null)\n          snapshot_id           = try(ebs.value.snapshot_id, null)\n          throughput            = try(ebs.value.throughput, null)\n          volume_size           = try(ebs.value.volume_size, null)\n          volume_type           = try(ebs.value.volume_type, null)\n        }\n      }\n\n      no_device    = try(block_device_mappings.value.no_device, null)\n      virtual_name = try(block_device_mappings.value.virtual_name, null)\n    }\n  }\n\n  dynamic \"capacity_reservation_specification\" {\n    for_each = length(var.capacity_reservation_specification) > 0 ? [var.capacity_reservation_specification] : []\n\n    content {\n      capacity_reservation_preference = try(capacity_reservation_specification.value.capacity_reservation_preference, null)\n\n      dynamic \"capacity_reservation_target\" {\n        for_each = try([capacity_reservation_specification.value.capacity_reservation_target], [])\n\n        content {\n          capacity_reservation_id                 = try(capacity_reservation_target.value.capacity_reservation_id, null)\n          capacity_reservation_resource_group_arn = try(capacity_reservation_target.value.capacity_reservation_resource_group_arn, null)\n        }\n      }\n    }\n  }\n\n  dynamic \"cpu_options\" {\n    for_each = length(var.cpu_options) > 0 ? [var.cpu_options] : []\n\n    content {\n      core_count       = try(cpu_options.value.core_count, null)\n      threads_per_core = try(cpu_options.value.threads_per_core, null)\n    }\n  }\n\n  dynamic \"credit_specification\" {\n    for_each = length(var.credit_specification) > 0 ? [var.credit_specification] : []\n\n    content {\n      cpu_credits = try(credit_specification.value.cpu_credits, null)\n    }\n  }\n\n  default_version         = var.launch_template_default_version\n  description             = var.launch_template_description\n  disable_api_termination = var.disable_api_termination\n  ebs_optimized           = var.ebs_optimized\n\n  dynamic \"elastic_gpu_specifications\" {\n    for_each = var.elastic_gpu_specifications\n\n    content {\n      type = elastic_gpu_specifications.value.type\n    }\n  }\n\n  dynamic \"elastic_inference_accelerator\" {\n    for_each = length(var.elastic_inference_accelerator) > 0 ? [var.elastic_inference_accelerator] : []\n\n    content {\n      type = elastic_inference_accelerator.value.type\n    }\n  }\n\n  dynamic \"enclave_options\" {\n    for_each = length(var.enclave_options) > 0 ? [var.enclave_options] : []\n\n    content {\n      enabled = enclave_options.value.enabled\n    }\n  }\n\n  # Set on EKS managed node group, will fail if set here\n  # https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html#launch-template-basics\n  # dynamic \"hibernation_options\" {\n  #   for_each = length(var.hibernation_options) > 0 ? [var.hibernation_options] : []\n\n  #   content {\n  #     configured = hibernation_options.value.configured\n  #   }\n  # }\n\n  # Set on EKS managed node group, will fail if set here\n  # https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html#launch-template-basics\n  # dynamic \"iam_instance_profile\" {\n  #   for_each = [var.iam_instance_profile]\n  #   content {\n  #     name = lookup(var.iam_instance_profile, \"name\", null)\n  #     arn  = lookup(var.iam_instance_profile, \"arn\", null)\n  #   }\n  # }\n\n  image_id = var.ami_id\n  # Set on EKS managed node group, will fail if set here\n  # https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html#launch-template-basics\n  # instance_initiated_shutdown_behavior = var.instance_initiated_shutdown_behavior\n\n  dynamic \"instance_market_options\" {\n    for_each = length(var.instance_market_options) > 0 ? [var.instance_market_options] : []\n\n    content {\n      market_type = try(instance_market_options.value.market_type, null)\n\n      dynamic \"spot_options\" {\n        for_each = try([instance_market_options.value.spot_options], [])\n\n        content {\n          block_duration_minutes         = try(spot_options.value.block_duration_minutes, null)\n          instance_interruption_behavior = try(spot_options.value.instance_interruption_behavior, null)\n          max_price                      = try(spot_options.value.max_price, null)\n          spot_instance_type             = try(spot_options.value.spot_instance_type, null)\n          valid_until                    = try(spot_options.value.valid_until, null)\n        }\n      }\n    }\n  }\n\n  # Instance type(s) are generally set on the node group,\n  # except when a ML capacity block reseravtion is used\n  instance_type = var.capacity_type == \"CAPACITY_BLOCK\" ? element(var.instance_types, 0) : null\n  kernel_id     = var.kernel_id\n  key_name      = var.key_name\n\n  dynamic \"license_specification\" {\n    for_each = length(var.license_specifications) > 0 ? var.license_specifications : {}\n\n    content {\n      license_configuration_arn = license_specification.value.license_configuration_arn\n    }\n  }\n\n  dynamic \"maintenance_options\" {\n    for_each = length(var.maintenance_options) > 0 ? [var.maintenance_options] : []\n\n    content {\n      auto_recovery = try(maintenance_options.value.auto_recovery, null)\n    }\n  }\n\n  dynamic \"metadata_options\" {\n    for_each = length(var.metadata_options) > 0 ? [var.metadata_options] : []\n\n    content {\n      http_endpoint               = try(metadata_options.value.http_endpoint, null)\n      http_protocol_ipv6          = try(metadata_options.value.http_protocol_ipv6, null)\n      http_put_response_hop_limit = try(metadata_options.value.http_put_response_hop_limit, null)\n      http_tokens                 = try(metadata_options.value.http_tokens, null)\n      instance_metadata_tags      = try(metadata_options.value.instance_metadata_tags, null)\n    }\n  }\n\n  dynamic \"monitoring\" {\n    for_each = var.enable_monitoring ? [1] : []\n\n    content {\n      enabled = var.enable_monitoring\n    }\n  }\n\n  name        = var.launch_template_use_name_prefix ? null : local.launch_template_name\n  name_prefix = var.launch_template_use_name_prefix ? \"${local.launch_template_name}-\" : null\n\n  dynamic \"network_interfaces\" {\n    for_each = local.network_interfaces\n\n    content {\n      associate_carrier_ip_address = try(network_interfaces.value.associate_carrier_ip_address, null)\n      associate_public_ip_address  = try(network_interfaces.value.associate_public_ip_address, null)\n      delete_on_termination        = try(network_interfaces.value.delete_on_termination, null)\n      description                  = try(network_interfaces.value.description, null)\n      device_index                 = try(network_interfaces.value.device_index, null)\n      interface_type               = try(network_interfaces.value.interface_type, null)\n      ipv4_address_count           = try(network_interfaces.value.ipv4_address_count, null)\n      ipv4_addresses               = try(network_interfaces.value.ipv4_addresses, [])\n      ipv4_prefix_count            = try(network_interfaces.value.ipv4_prefix_count, null)\n      ipv4_prefixes                = try(network_interfaces.value.ipv4_prefixes, null)\n      ipv6_address_count           = try(network_interfaces.value.ipv6_address_count, null)\n      ipv6_addresses               = try(network_interfaces.value.ipv6_addresses, [])\n      ipv6_prefix_count            = try(network_interfaces.value.ipv6_prefix_count, null)\n      ipv6_prefixes                = try(network_interfaces.value.ipv6_prefixes, [])\n      network_card_index           = try(network_interfaces.value.network_card_index, null)\n      network_interface_id         = try(network_interfaces.value.network_interface_id, null)\n      primary_ipv6                 = try(network_interfaces.value.primary_ipv6, null)\n      private_ip_address           = try(network_interfaces.value.private_ip_address, null)\n      # Ref: https://github.com/hashicorp/terraform-provider-aws/issues/4570\n      security_groups = compact(concat(try(network_interfaces.value.security_groups, []), local.security_group_ids))\n      # Set on EKS managed node group, will fail if set here\n      # https://docs.aws.amazon.com/eks/latest/userguide/launch-templates.html#launch-template-basics\n      # subnet_id       = try(network_interfaces.value.subnet_id, null)\n    }\n  }\n\n  dynamic \"placement\" {\n    for_each = length(local.placement) > 0 ? [local.placement] : []\n\n    content {\n      affinity                = try(placement.value.affinity, null)\n      availability_zone       = lookup(placement.value, \"availability_zone\", null)\n      group_name              = lookup(placement.value, \"group_name\", null)\n      host_id                 = lookup(placement.value, \"host_id\", null)\n      host_resource_group_arn = lookup(placement.value, \"host_resource_group_arn\", null)\n      partition_number        = try(placement.value.partition_number, null)\n      spread_domain           = try(placement.value.spread_domain, null)\n      tenancy                 = try(placement.value.tenancy, null)\n    }\n  }\n\n  dynamic \"private_dns_name_options\" {\n    for_each = length(var.private_dns_name_options) > 0 ? [var.private_dns_name_options] : []\n\n    content {\n      enable_resource_name_dns_aaaa_record = try(private_dns_name_options.value.enable_resource_name_dns_aaaa_record, null)\n      enable_resource_name_dns_a_record    = try(private_dns_name_options.value.enable_resource_name_dns_a_record, null)\n      hostname_type                        = try(private_dns_name_options.value.hostname_type, null)\n    }\n  }\n\n  ram_disk_id = var.ram_disk_id\n\n  dynamic \"tag_specifications\" {\n    for_each = toset(var.tag_specifications)\n\n    content {\n      resource_type = tag_specifications.key\n      tags          = merge(var.tags, { Name = var.name }, var.launch_template_tags)\n    }\n  }\n\n  update_default_version = var.update_launch_template_default_version\n  user_data              = module.user_data.user_data\n  vpc_security_group_ids = length(local.network_interfaces) > 0 ? [] : local.security_group_ids\n\n  tags = merge(\n    var.tags,\n    var.launch_template_tags,\n  )\n\n  # Prevent premature access of policies by pods that\n  # require permissions on create/destroy that depend on nodes\n  depends_on = [\n    aws_iam_role_policy_attachment.this,\n    aws_iam_role_policy_attachment.additional,\n  ]\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_79", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure Instance Metadata Service Version 1 is not enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/modules/self-managed-node-group/main.tf"}, "region": {"startLine": 124, "endLine": 479, "snippet": {"text": "resource \"aws_launch_template\" \"this\" {\n  count = var.create && var.create_launch_template ? 1 : 0\n\n  dynamic \"block_device_mappings\" {\n    for_each = var.block_device_mappings\n\n    content {\n      device_name = try(block_device_mappings.value.device_name, null)\n\n      dynamic \"ebs\" {\n        for_each = try([block_device_mappings.value.ebs], [])\n\n        content {\n          delete_on_termination = try(ebs.value.delete_on_termination, null)\n          encrypted             = try(ebs.value.encrypted, null)\n          iops                  = try(ebs.value.iops, null)\n          kms_key_id            = try(ebs.value.kms_key_id, null)\n          snapshot_id           = try(ebs.value.snapshot_id, null)\n          throughput            = try(ebs.value.throughput, null)\n          volume_size           = try(ebs.value.volume_size, null)\n          volume_type           = try(ebs.value.volume_type, null)\n        }\n      }\n\n      no_device    = try(block_device_mappings.value.no_device, null)\n      virtual_name = try(block_device_mappings.value.virtual_name, null)\n    }\n  }\n\n  dynamic \"capacity_reservation_specification\" {\n    for_each = length(var.capacity_reservation_specification) > 0 ? [var.capacity_reservation_specification] : []\n\n    content {\n      capacity_reservation_preference = try(capacity_reservation_specification.value.capacity_reservation_preference, null)\n\n      dynamic \"capacity_reservation_target\" {\n        for_each = try([capacity_reservation_specification.value.capacity_reservation_target], [])\n\n        content {\n          capacity_reservation_id                 = try(capacity_reservation_target.value.capacity_reservation_id, null)\n          capacity_reservation_resource_group_arn = try(capacity_reservation_target.value.capacity_reservation_resource_group_arn, null)\n        }\n      }\n    }\n  }\n\n  dynamic \"cpu_options\" {\n    for_each = length(var.cpu_options) > 0 ? [var.cpu_options] : []\n\n    content {\n      core_count       = try(cpu_options.value.core_count, null)\n      threads_per_core = try(cpu_options.value.threads_per_core, null)\n    }\n  }\n\n  dynamic \"credit_specification\" {\n    for_each = length(var.credit_specification) > 0 ? [var.credit_specification] : []\n\n    content {\n      cpu_credits = try(credit_specification.value.cpu_credits, null)\n    }\n  }\n\n  default_version         = var.launch_template_default_version\n  description             = var.launch_template_description\n  disable_api_termination = var.disable_api_termination\n  ebs_optimized           = var.ebs_optimized\n\n  dynamic \"elastic_gpu_specifications\" {\n    for_each = var.elastic_gpu_specifications\n\n    content {\n      type = elastic_gpu_specifications.value.type\n    }\n  }\n\n  dynamic \"elastic_inference_accelerator\" {\n    for_each = length(var.elastic_inference_accelerator) > 0 ? [var.elastic_inference_accelerator] : []\n\n    content {\n      type = elastic_inference_accelerator.value.type\n    }\n  }\n\n  dynamic \"enclave_options\" {\n    for_each = length(var.enclave_options) > 0 ? [var.enclave_options] : []\n\n    content {\n      enabled = enclave_options.value.enabled\n    }\n  }\n\n  dynamic \"hibernation_options\" {\n    for_each = length(var.hibernation_options) > 0 ? [var.hibernation_options] : []\n\n    content {\n      configured = hibernation_options.value.configured\n    }\n  }\n\n  iam_instance_profile {\n    arn = var.create_iam_instance_profile ? aws_iam_instance_profile.this[0].arn : var.iam_instance_profile_arn\n  }\n\n  image_id                             = coalesce(var.ami_id, nonsensitive(data.aws_ssm_parameter.ami[0].value))\n  instance_initiated_shutdown_behavior = var.instance_initiated_shutdown_behavior\n\n  dynamic \"instance_market_options\" {\n    for_each = length(var.instance_market_options) > 0 ? [var.instance_market_options] : []\n\n    content {\n      market_type = try(instance_market_options.value.market_type, null)\n\n      dynamic \"spot_options\" {\n        for_each = try([instance_market_options.value.spot_options], [])\n\n        content {\n          block_duration_minutes         = try(spot_options.value.block_duration_minutes, null)\n          instance_interruption_behavior = try(spot_options.value.instance_interruption_behavior, null)\n          max_price                      = try(spot_options.value.max_price, null)\n          spot_instance_type             = try(spot_options.value.spot_instance_type, null)\n          valid_until                    = try(spot_options.value.valid_until, null)\n        }\n      }\n    }\n  }\n\n  dynamic \"instance_requirements\" {\n    for_each = length(var.instance_requirements) > 0 ? [var.instance_requirements] : []\n\n    content {\n\n      dynamic \"accelerator_count\" {\n        for_each = try([instance_requirements.value.accelerator_count], [])\n\n        content {\n          max = try(accelerator_count.value.max, null)\n          min = try(accelerator_count.value.min, null)\n        }\n      }\n\n      accelerator_manufacturers = try(instance_requirements.value.accelerator_manufacturers, [])\n      accelerator_names         = try(instance_requirements.value.accelerator_names, [])\n\n      dynamic \"accelerator_total_memory_mib\" {\n        for_each = try([instance_requirements.value.accelerator_total_memory_mib], [])\n\n        content {\n          max = try(accelerator_total_memory_mib.value.max, null)\n          min = try(accelerator_total_memory_mib.value.min, null)\n        }\n      }\n\n      accelerator_types      = try(instance_requirements.value.accelerator_types, [])\n      allowed_instance_types = try(instance_requirements.value.allowed_instance_types, null)\n      bare_metal             = try(instance_requirements.value.bare_metal, null)\n\n      dynamic \"baseline_ebs_bandwidth_mbps\" {\n        for_each = try([instance_requirements.value.baseline_ebs_bandwidth_mbps], [])\n\n        content {\n          max = try(baseline_ebs_bandwidth_mbps.value.max, null)\n          min = try(baseline_ebs_bandwidth_mbps.value.min, null)\n        }\n      }\n\n      burstable_performance   = try(instance_requirements.value.burstable_performance, null)\n      cpu_manufacturers       = try(instance_requirements.value.cpu_manufacturers, [])\n      excluded_instance_types = try(instance_requirements.value.excluded_instance_types, null)\n      instance_generations    = try(instance_requirements.value.instance_generations, [])\n      local_storage           = try(instance_requirements.value.local_storage, null)\n      local_storage_types     = try(instance_requirements.value.local_storage_types, [])\n\n      dynamic \"memory_gib_per_vcpu\" {\n        for_each = try([instance_requirements.value.memory_gib_per_vcpu], [])\n\n        content {\n          max = try(memory_gib_per_vcpu.value.max, null)\n          min = try(memory_gib_per_vcpu.value.min, null)\n        }\n      }\n\n      dynamic \"memory_mib\" {\n        for_each = [instance_requirements.value.memory_mib]\n\n        content {\n          max = try(memory_mib.value.max, null)\n          min = memory_mib.value.min\n        }\n      }\n\n      dynamic \"network_bandwidth_gbps\" {\n        for_each = try([instance_requirements.value.network_bandwidth_gbps], [])\n\n        content {\n          max = try(network_bandwidth_gbps.value.max, null)\n          min = try(network_bandwidth_gbps.value.min, null)\n        }\n      }\n\n      dynamic \"network_interface_count\" {\n        for_each = try([instance_requirements.value.network_interface_count], [])\n\n        content {\n          max = try(network_interface_count.value.max, null)\n          min = try(network_interface_count.value.min, null)\n        }\n      }\n\n      on_demand_max_price_percentage_over_lowest_price = try(instance_requirements.value.on_demand_max_price_percentage_over_lowest_price, null)\n      require_hibernate_support                        = try(instance_requirements.value.require_hibernate_support, null)\n      spot_max_price_percentage_over_lowest_price      = try(instance_requirements.value.spot_max_price_percentage_over_lowest_price, null)\n\n      dynamic \"total_local_storage_gb\" {\n        for_each = try([instance_requirements.value.total_local_storage_gb], [])\n\n        content {\n          max = try(total_local_storage_gb.value.max, null)\n          min = try(total_local_storage_gb.value.min, null)\n        }\n      }\n\n      dynamic \"vcpu_count\" {\n        for_each = [instance_requirements.value.vcpu_count]\n\n        content {\n          max = try(vcpu_count.value.max, null)\n          min = vcpu_count.value.min\n        }\n      }\n    }\n  }\n\n  instance_type = var.instance_type\n  kernel_id     = var.kernel_id\n  key_name      = var.key_name\n\n  dynamic \"license_specification\" {\n    for_each = length(var.license_specifications) > 0 ? var.license_specifications : {}\n\n    content {\n      license_configuration_arn = license_specification.value.license_configuration_arn\n    }\n  }\n\n  dynamic \"maintenance_options\" {\n    for_each = length(var.maintenance_options) > 0 ? [var.maintenance_options] : []\n\n    content {\n      auto_recovery = try(maintenance_options.value.auto_recovery, null)\n    }\n  }\n\n  dynamic \"metadata_options\" {\n    for_each = length(var.metadata_options) > 0 ? [var.metadata_options] : []\n\n    content {\n      http_endpoint               = try(metadata_options.value.http_endpoint, null)\n      http_protocol_ipv6          = try(metadata_options.value.http_protocol_ipv6, null)\n      http_put_response_hop_limit = try(metadata_options.value.http_put_response_hop_limit, null)\n      http_tokens                 = try(metadata_options.value.http_tokens, null)\n      instance_metadata_tags      = try(metadata_options.value.instance_metadata_tags, null)\n    }\n  }\n\n  dynamic \"monitoring\" {\n    for_each = var.enable_monitoring ? [1] : []\n\n    content {\n      enabled = var.enable_monitoring\n    }\n  }\n\n  name        = var.launch_template_use_name_prefix ? null : local.launch_template_name\n  name_prefix = var.launch_template_use_name_prefix ? \"${local.launch_template_name}-\" : null\n\n  dynamic \"network_interfaces\" {\n    for_each = local.network_interfaces\n\n    content {\n      associate_carrier_ip_address = try(network_interfaces.value.associate_carrier_ip_address, null)\n      associate_public_ip_address  = try(network_interfaces.value.associate_public_ip_address, null)\n      delete_on_termination        = try(network_interfaces.value.delete_on_termination, null)\n      description                  = try(network_interfaces.value.description, null)\n      device_index                 = try(network_interfaces.value.device_index, null)\n      interface_type               = try(network_interfaces.value.interface_type, null)\n      ipv4_address_count           = try(network_interfaces.value.ipv4_address_count, null)\n      ipv4_addresses               = try(network_interfaces.value.ipv4_addresses, [])\n      ipv4_prefix_count            = try(network_interfaces.value.ipv4_prefix_count, null)\n      ipv4_prefixes                = try(network_interfaces.value.ipv4_prefixes, null)\n      ipv6_address_count           = try(network_interfaces.value.ipv6_address_count, null)\n      ipv6_addresses               = try(network_interfaces.value.ipv6_addresses, [])\n      ipv6_prefix_count            = try(network_interfaces.value.ipv6_prefix_count, null)\n      ipv6_prefixes                = try(network_interfaces.value.ipv6_prefixes, [])\n      network_card_index           = try(network_interfaces.value.network_card_index, null)\n      network_interface_id         = try(network_interfaces.value.network_interface_id, null)\n      private_ip_address           = try(network_interfaces.value.private_ip_address, null)\n      # Ref: https://github.com/hashicorp/terraform-provider-aws/issues/4570\n      security_groups = compact(concat(try(network_interfaces.value.security_groups, []), local.security_group_ids))\n      subnet_id       = try(network_interfaces.value.subnet_id, null)\n    }\n  }\n\n  dynamic \"placement\" {\n    for_each = length(local.placement) > 0 ? [local.placement] : []\n\n    content {\n      affinity                = try(placement.value.affinity, null)\n      availability_zone       = lookup(placement.value, \"availability_zone\", null)\n      group_name              = lookup(placement.value, \"group_name\", null)\n      host_id                 = lookup(placement.value, \"host_id\", null)\n      host_resource_group_arn = lookup(placement.value, \"host_resource_group_arn\", null)\n      partition_number        = try(placement.value.partition_number, null)\n      spread_domain           = try(placement.value.spread_domain, null)\n      tenancy                 = try(placement.value.tenancy, null)\n    }\n  }\n\n  dynamic \"private_dns_name_options\" {\n    for_each = length(var.private_dns_name_options) > 0 ? [var.private_dns_name_options] : []\n\n    content {\n      enable_resource_name_dns_aaaa_record = try(private_dns_name_options.value.enable_resource_name_dns_aaaa_record, null)\n      enable_resource_name_dns_a_record    = try(private_dns_name_options.value.enable_resource_name_dns_a_record, null)\n      hostname_type                        = try(private_dns_name_options.value.hostname_type, null)\n    }\n  }\n\n  ram_disk_id = var.ram_disk_id\n\n  dynamic \"tag_specifications\" {\n    for_each = toset(var.tag_specifications)\n\n    content {\n      resource_type = tag_specifications.key\n      tags          = merge(var.tags, { Name = var.name }, var.launch_template_tags)\n    }\n  }\n\n  update_default_version = var.update_launch_template_default_version\n  user_data              = module.user_data.user_data\n  vpc_security_group_ids = length(local.network_interfaces) > 0 ? [] : local.security_group_ids\n\n  tags = var.tags\n\n  # Prevent premature access of policies by pods that\n  # require permissions on create/destroy that depend on nodes\n  depends_on = [\n    aws_iam_role_policy_attachment.this,\n    aws_iam_role_policy_attachment.additional,\n  ]\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_341", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure Launch template should not have a metadata response hop limit greater than 1"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/modules/self-managed-node-group/main.tf"}, "region": {"startLine": 124, "endLine": 479, "snippet": {"text": "resource \"aws_launch_template\" \"this\" {\n  count = var.create && var.create_launch_template ? 1 : 0\n\n  dynamic \"block_device_mappings\" {\n    for_each = var.block_device_mappings\n\n    content {\n      device_name = try(block_device_mappings.value.device_name, null)\n\n      dynamic \"ebs\" {\n        for_each = try([block_device_mappings.value.ebs], [])\n\n        content {\n          delete_on_termination = try(ebs.value.delete_on_termination, null)\n          encrypted             = try(ebs.value.encrypted, null)\n          iops                  = try(ebs.value.iops, null)\n          kms_key_id            = try(ebs.value.kms_key_id, null)\n          snapshot_id           = try(ebs.value.snapshot_id, null)\n          throughput            = try(ebs.value.throughput, null)\n          volume_size           = try(ebs.value.volume_size, null)\n          volume_type           = try(ebs.value.volume_type, null)\n        }\n      }\n\n      no_device    = try(block_device_mappings.value.no_device, null)\n      virtual_name = try(block_device_mappings.value.virtual_name, null)\n    }\n  }\n\n  dynamic \"capacity_reservation_specification\" {\n    for_each = length(var.capacity_reservation_specification) > 0 ? [var.capacity_reservation_specification] : []\n\n    content {\n      capacity_reservation_preference = try(capacity_reservation_specification.value.capacity_reservation_preference, null)\n\n      dynamic \"capacity_reservation_target\" {\n        for_each = try([capacity_reservation_specification.value.capacity_reservation_target], [])\n\n        content {\n          capacity_reservation_id                 = try(capacity_reservation_target.value.capacity_reservation_id, null)\n          capacity_reservation_resource_group_arn = try(capacity_reservation_target.value.capacity_reservation_resource_group_arn, null)\n        }\n      }\n    }\n  }\n\n  dynamic \"cpu_options\" {\n    for_each = length(var.cpu_options) > 0 ? [var.cpu_options] : []\n\n    content {\n      core_count       = try(cpu_options.value.core_count, null)\n      threads_per_core = try(cpu_options.value.threads_per_core, null)\n    }\n  }\n\n  dynamic \"credit_specification\" {\n    for_each = length(var.credit_specification) > 0 ? [var.credit_specification] : []\n\n    content {\n      cpu_credits = try(credit_specification.value.cpu_credits, null)\n    }\n  }\n\n  default_version         = var.launch_template_default_version\n  description             = var.launch_template_description\n  disable_api_termination = var.disable_api_termination\n  ebs_optimized           = var.ebs_optimized\n\n  dynamic \"elastic_gpu_specifications\" {\n    for_each = var.elastic_gpu_specifications\n\n    content {\n      type = elastic_gpu_specifications.value.type\n    }\n  }\n\n  dynamic \"elastic_inference_accelerator\" {\n    for_each = length(var.elastic_inference_accelerator) > 0 ? [var.elastic_inference_accelerator] : []\n\n    content {\n      type = elastic_inference_accelerator.value.type\n    }\n  }\n\n  dynamic \"enclave_options\" {\n    for_each = length(var.enclave_options) > 0 ? [var.enclave_options] : []\n\n    content {\n      enabled = enclave_options.value.enabled\n    }\n  }\n\n  dynamic \"hibernation_options\" {\n    for_each = length(var.hibernation_options) > 0 ? [var.hibernation_options] : []\n\n    content {\n      configured = hibernation_options.value.configured\n    }\n  }\n\n  iam_instance_profile {\n    arn = var.create_iam_instance_profile ? aws_iam_instance_profile.this[0].arn : var.iam_instance_profile_arn\n  }\n\n  image_id                             = coalesce(var.ami_id, nonsensitive(data.aws_ssm_parameter.ami[0].value))\n  instance_initiated_shutdown_behavior = var.instance_initiated_shutdown_behavior\n\n  dynamic \"instance_market_options\" {\n    for_each = length(var.instance_market_options) > 0 ? [var.instance_market_options] : []\n\n    content {\n      market_type = try(instance_market_options.value.market_type, null)\n\n      dynamic \"spot_options\" {\n        for_each = try([instance_market_options.value.spot_options], [])\n\n        content {\n          block_duration_minutes         = try(spot_options.value.block_duration_minutes, null)\n          instance_interruption_behavior = try(spot_options.value.instance_interruption_behavior, null)\n          max_price                      = try(spot_options.value.max_price, null)\n          spot_instance_type             = try(spot_options.value.spot_instance_type, null)\n          valid_until                    = try(spot_options.value.valid_until, null)\n        }\n      }\n    }\n  }\n\n  dynamic \"instance_requirements\" {\n    for_each = length(var.instance_requirements) > 0 ? [var.instance_requirements] : []\n\n    content {\n\n      dynamic \"accelerator_count\" {\n        for_each = try([instance_requirements.value.accelerator_count], [])\n\n        content {\n          max = try(accelerator_count.value.max, null)\n          min = try(accelerator_count.value.min, null)\n        }\n      }\n\n      accelerator_manufacturers = try(instance_requirements.value.accelerator_manufacturers, [])\n      accelerator_names         = try(instance_requirements.value.accelerator_names, [])\n\n      dynamic \"accelerator_total_memory_mib\" {\n        for_each = try([instance_requirements.value.accelerator_total_memory_mib], [])\n\n        content {\n          max = try(accelerator_total_memory_mib.value.max, null)\n          min = try(accelerator_total_memory_mib.value.min, null)\n        }\n      }\n\n      accelerator_types      = try(instance_requirements.value.accelerator_types, [])\n      allowed_instance_types = try(instance_requirements.value.allowed_instance_types, null)\n      bare_metal             = try(instance_requirements.value.bare_metal, null)\n\n      dynamic \"baseline_ebs_bandwidth_mbps\" {\n        for_each = try([instance_requirements.value.baseline_ebs_bandwidth_mbps], [])\n\n        content {\n          max = try(baseline_ebs_bandwidth_mbps.value.max, null)\n          min = try(baseline_ebs_bandwidth_mbps.value.min, null)\n        }\n      }\n\n      burstable_performance   = try(instance_requirements.value.burstable_performance, null)\n      cpu_manufacturers       = try(instance_requirements.value.cpu_manufacturers, [])\n      excluded_instance_types = try(instance_requirements.value.excluded_instance_types, null)\n      instance_generations    = try(instance_requirements.value.instance_generations, [])\n      local_storage           = try(instance_requirements.value.local_storage, null)\n      local_storage_types     = try(instance_requirements.value.local_storage_types, [])\n\n      dynamic \"memory_gib_per_vcpu\" {\n        for_each = try([instance_requirements.value.memory_gib_per_vcpu], [])\n\n        content {\n          max = try(memory_gib_per_vcpu.value.max, null)\n          min = try(memory_gib_per_vcpu.value.min, null)\n        }\n      }\n\n      dynamic \"memory_mib\" {\n        for_each = [instance_requirements.value.memory_mib]\n\n        content {\n          max = try(memory_mib.value.max, null)\n          min = memory_mib.value.min\n        }\n      }\n\n      dynamic \"network_bandwidth_gbps\" {\n        for_each = try([instance_requirements.value.network_bandwidth_gbps], [])\n\n        content {\n          max = try(network_bandwidth_gbps.value.max, null)\n          min = try(network_bandwidth_gbps.value.min, null)\n        }\n      }\n\n      dynamic \"network_interface_count\" {\n        for_each = try([instance_requirements.value.network_interface_count], [])\n\n        content {\n          max = try(network_interface_count.value.max, null)\n          min = try(network_interface_count.value.min, null)\n        }\n      }\n\n      on_demand_max_price_percentage_over_lowest_price = try(instance_requirements.value.on_demand_max_price_percentage_over_lowest_price, null)\n      require_hibernate_support                        = try(instance_requirements.value.require_hibernate_support, null)\n      spot_max_price_percentage_over_lowest_price      = try(instance_requirements.value.spot_max_price_percentage_over_lowest_price, null)\n\n      dynamic \"total_local_storage_gb\" {\n        for_each = try([instance_requirements.value.total_local_storage_gb], [])\n\n        content {\n          max = try(total_local_storage_gb.value.max, null)\n          min = try(total_local_storage_gb.value.min, null)\n        }\n      }\n\n      dynamic \"vcpu_count\" {\n        for_each = [instance_requirements.value.vcpu_count]\n\n        content {\n          max = try(vcpu_count.value.max, null)\n          min = vcpu_count.value.min\n        }\n      }\n    }\n  }\n\n  instance_type = var.instance_type\n  kernel_id     = var.kernel_id\n  key_name      = var.key_name\n\n  dynamic \"license_specification\" {\n    for_each = length(var.license_specifications) > 0 ? var.license_specifications : {}\n\n    content {\n      license_configuration_arn = license_specification.value.license_configuration_arn\n    }\n  }\n\n  dynamic \"maintenance_options\" {\n    for_each = length(var.maintenance_options) > 0 ? [var.maintenance_options] : []\n\n    content {\n      auto_recovery = try(maintenance_options.value.auto_recovery, null)\n    }\n  }\n\n  dynamic \"metadata_options\" {\n    for_each = length(var.metadata_options) > 0 ? [var.metadata_options] : []\n\n    content {\n      http_endpoint               = try(metadata_options.value.http_endpoint, null)\n      http_protocol_ipv6          = try(metadata_options.value.http_protocol_ipv6, null)\n      http_put_response_hop_limit = try(metadata_options.value.http_put_response_hop_limit, null)\n      http_tokens                 = try(metadata_options.value.http_tokens, null)\n      instance_metadata_tags      = try(metadata_options.value.instance_metadata_tags, null)\n    }\n  }\n\n  dynamic \"monitoring\" {\n    for_each = var.enable_monitoring ? [1] : []\n\n    content {\n      enabled = var.enable_monitoring\n    }\n  }\n\n  name        = var.launch_template_use_name_prefix ? null : local.launch_template_name\n  name_prefix = var.launch_template_use_name_prefix ? \"${local.launch_template_name}-\" : null\n\n  dynamic \"network_interfaces\" {\n    for_each = local.network_interfaces\n\n    content {\n      associate_carrier_ip_address = try(network_interfaces.value.associate_carrier_ip_address, null)\n      associate_public_ip_address  = try(network_interfaces.value.associate_public_ip_address, null)\n      delete_on_termination        = try(network_interfaces.value.delete_on_termination, null)\n      description                  = try(network_interfaces.value.description, null)\n      device_index                 = try(network_interfaces.value.device_index, null)\n      interface_type               = try(network_interfaces.value.interface_type, null)\n      ipv4_address_count           = try(network_interfaces.value.ipv4_address_count, null)\n      ipv4_addresses               = try(network_interfaces.value.ipv4_addresses, [])\n      ipv4_prefix_count            = try(network_interfaces.value.ipv4_prefix_count, null)\n      ipv4_prefixes                = try(network_interfaces.value.ipv4_prefixes, null)\n      ipv6_address_count           = try(network_interfaces.value.ipv6_address_count, null)\n      ipv6_addresses               = try(network_interfaces.value.ipv6_addresses, [])\n      ipv6_prefix_count            = try(network_interfaces.value.ipv6_prefix_count, null)\n      ipv6_prefixes                = try(network_interfaces.value.ipv6_prefixes, [])\n      network_card_index           = try(network_interfaces.value.network_card_index, null)\n      network_interface_id         = try(network_interfaces.value.network_interface_id, null)\n      private_ip_address           = try(network_interfaces.value.private_ip_address, null)\n      # Ref: https://github.com/hashicorp/terraform-provider-aws/issues/4570\n      security_groups = compact(concat(try(network_interfaces.value.security_groups, []), local.security_group_ids))\n      subnet_id       = try(network_interfaces.value.subnet_id, null)\n    }\n  }\n\n  dynamic \"placement\" {\n    for_each = length(local.placement) > 0 ? [local.placement] : []\n\n    content {\n      affinity                = try(placement.value.affinity, null)\n      availability_zone       = lookup(placement.value, \"availability_zone\", null)\n      group_name              = lookup(placement.value, \"group_name\", null)\n      host_id                 = lookup(placement.value, \"host_id\", null)\n      host_resource_group_arn = lookup(placement.value, \"host_resource_group_arn\", null)\n      partition_number        = try(placement.value.partition_number, null)\n      spread_domain           = try(placement.value.spread_domain, null)\n      tenancy                 = try(placement.value.tenancy, null)\n    }\n  }\n\n  dynamic \"private_dns_name_options\" {\n    for_each = length(var.private_dns_name_options) > 0 ? [var.private_dns_name_options] : []\n\n    content {\n      enable_resource_name_dns_aaaa_record = try(private_dns_name_options.value.enable_resource_name_dns_aaaa_record, null)\n      enable_resource_name_dns_a_record    = try(private_dns_name_options.value.enable_resource_name_dns_a_record, null)\n      hostname_type                        = try(private_dns_name_options.value.hostname_type, null)\n    }\n  }\n\n  ram_disk_id = var.ram_disk_id\n\n  dynamic \"tag_specifications\" {\n    for_each = toset(var.tag_specifications)\n\n    content {\n      resource_type = tag_specifications.key\n      tags          = merge(var.tags, { Name = var.name }, var.launch_template_tags)\n    }\n  }\n\n  update_default_version = var.update_launch_template_default_version\n  user_data              = module.user_data.user_data\n  vpc_security_group_ids = length(local.network_interfaces) > 0 ? [] : local.security_group_ids\n\n  tags = var.tags\n\n  # Prevent premature access of policies by pods that\n  # require permissions on create/destroy that depend on nodes\n  depends_on = [\n    aws_iam_role_policy_attachment.this,\n    aws_iam_role_policy_attachment.additional,\n  ]\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_111", "ruleIndex": 9, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow write access without constraints"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/node_groups.tf"}, "region": {"startLine": 49, "endLine": 69, "snippet": {"text": "data \"aws_iam_policy_document\" \"cni_ipv6_policy\" {\n  count = var.create && var.create_cni_ipv6_iam_policy ? 1 : 0\n\n  statement {\n    sid = \"AssignDescribe\"\n    actions = [\n      \"ec2:AssignIpv6Addresses\",\n      \"ec2:DescribeInstances\",\n      \"ec2:DescribeTags\",\n      \"ec2:DescribeNetworkInterfaces\",\n      \"ec2:DescribeInstanceTypes\"\n    ]\n    resources = [\"*\"]\n  }\n\n  statement {\n    sid       = \"CreateTags\"\n    actions   = [\"ec2:CreateTags\"]\n    resources = [\"arn:${local.partition}:ec2:*:*:network-interface/*\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_356", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/node_groups.tf"}, "region": {"startLine": 49, "endLine": 69, "snippet": {"text": "data \"aws_iam_policy_document\" \"cni_ipv6_policy\" {\n  count = var.create && var.create_cni_ipv6_iam_policy ? 1 : 0\n\n  statement {\n    sid = \"AssignDescribe\"\n    actions = [\n      \"ec2:AssignIpv6Addresses\",\n      \"ec2:DescribeInstances\",\n      \"ec2:DescribeTags\",\n      \"ec2:DescribeNetworkInterfaces\",\n      \"ec2:DescribeInstanceTypes\"\n    ]\n    resources = [\"*\"]\n  }\n\n  statement {\n    sid       = \"CreateTags\"\n    actions   = [\"ec2:CreateTags\"]\n    resources = [\"arn:${local.partition}:ec2:*:*:network-interface/*\"]\n  }\n}\n"}}}}]}, {"ruleId": "CKV_TF_1", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure Terraform module sources use a commit hash"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/1_vpc.tf"}, "region": {"startLine": 1, "endLine": 33, "snippet": {"text": "module \"vpc\" {\n  source  = \"terraform-aws-modules/vpc/aws\"\n  version = \"5.13.0\"\n\n  name = \"${var.project}-${var.environment}-vpc\"\n  cidr = var.vpc.cidr\n\n  azs             = var.vpc.availability_zones\n  private_subnets = var.vpc.private_subnets\n  public_subnets  = var.vpc.public_subnets\n\n  enable_nat_gateway     = var.vpc.enable_nat_gateway\n  single_nat_gateway     = var.vpc.single_nat_gateway\n  one_nat_gateway_per_az = var.vpc.one_nat_gateway_per_az\n\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  enable_flow_log                      = true\n  create_flow_log_cloudwatch_log_group = true\n  create_flow_log_cloudwatch_iam_role  = true\n  flow_log_max_aggregation_interval    = 60\n\n  public_subnet_tags = {\n    \"kubernetes.io/role/elb\" = 1\n  }\n\n  private_subnet_tags = {\n    \"kubernetes.io/role/internal-elb\" = 1\n    \"karpenter.sh/discovery\" = \"${var.project}-${var.environment}\"\n  }\n\n}\n"}}}}]}, {"ruleId": "CKV_TF_1", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure Terraform module sources use a commit hash"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/2_eks_cluster.tf"}, "region": {"startLine": 1, "endLine": 40, "snippet": {"text": "module \"eks\" {\n  source  = \"terraform-aws-modules/eks/aws\"\n  version = \"20.24.0\"\n\n  cluster_name    = \"${var.project}-${var.environment}\"\n  cluster_version = \"${var.eks.cluster_version}\"\n\n  cluster_endpoint_public_access = true\n  enable_cluster_creator_admin_permissions = true\n\n  eks_managed_node_groups = {\n    addons = {\n      name                     = \"${var.project}-${var.environment}-addon\"\n      use_name_prefix          = false\n      ami_type       = \"AL2023_x86_64_STANDARD\"\n      instance_types = [\"t3.medium\"]\n      min_size       = 1\n      max_size       = 5\n      desired_size   = 2\n      iam_role_additional_policies = {\n        \"ssm\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      }\n\n      taints = {\n        addons = {\n          key    = \"CriticalAddonsOnly\"\n          value  = \"true\"\n          effect = \"NO_SCHEDULE\"\n        },\n      }\n    }\n  }\n  \n  node_security_group_tags = {\n    \"karpenter.sh/discovery\" = \"${var.project}-${var.environment}\"\n  }\n  vpc_id     = module.vpc.vpc_id\n  subnet_ids = module.vpc.private_subnets\n\n}\n"}}}}]}, {"ruleId": "CKV_AWS_290", "ruleIndex": 10, "level": "error", "attachments": [], "message": {"text": "Ensure IAM policies does not allow write access without constraints"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/4_alb_ingress_controller.tf"}, "region": {"startLine": 2, "endLine": 257, "snippet": {"text": "resource \"aws_iam_role_policy\" \"eks_alb_ingress_policy\" {\n  name        = \"${var.project}-${var.environment}-eks-alb-ingress-policy\"\n  role = aws_iam_role.eks-alb-ingress-controller.id\n\n  policy = jsonencode({\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:CreateServiceLinkedRole\"\n            ],\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"iam:AWSServiceName\": \"elasticloadbalancing.amazonaws.com\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:DescribeAccountAttributes\",\n                \"ec2:DescribeAddresses\",\n                \"ec2:DescribeAvailabilityZones\",\n                \"ec2:DescribeInternetGateways\",\n                \"ec2:DescribeVpcs\",\n                \"ec2:DescribeVpcPeeringConnections\",\n                \"ec2:DescribeSubnets\",\n                \"ec2:DescribeSecurityGroups\",\n                \"ec2:DescribeInstances\",\n                \"ec2:DescribeNetworkInterfaces\",\n                \"ec2:DescribeTags\",\n                \"ec2:GetCoipPoolUsage\",\n                \"ec2:DescribeCoipPools\",\n                \"ec2:GetSecurityGroupsForVpc\",\n                \"ec2:DescribeIpamPools\",\n                \"ec2:DescribeRouteTables\",\n                \"elasticloadbalancing:DescribeLoadBalancers\",\n                \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n                \"elasticloadbalancing:DescribeListeners\",\n                \"elasticloadbalancing:DescribeListenerCertificates\",\n                \"elasticloadbalancing:DescribeSSLPolicies\",\n                \"elasticloadbalancing:DescribeRules\",\n                \"elasticloadbalancing:DescribeTargetGroups\",\n                \"elasticloadbalancing:DescribeTargetGroupAttributes\",\n                \"elasticloadbalancing:DescribeTargetHealth\",\n                \"elasticloadbalancing:DescribeTags\",\n                \"elasticloadbalancing:DescribeTrustStores\",\n                \"elasticloadbalancing:DescribeListenerAttributes\",\n                \"elasticloadbalancing:DescribeCapacityReservation\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cognito-idp:DescribeUserPoolClient\",\n                \"acm:ListCertificates\",\n                \"acm:DescribeCertificate\",\n                \"iam:ListServerCertificates\",\n                \"iam:GetServerCertificate\",\n                \"waf-regional:GetWebACL\",\n                \"waf-regional:GetWebACLForResource\",\n                \"waf-regional:AssociateWebACL\",\n                \"waf-regional:DisassociateWebACL\",\n                \"wafv2:GetWebACL\",\n                \"wafv2:GetWebACLForResource\",\n                \"wafv2:AssociateWebACL\",\n                \"wafv2:DisassociateWebACL\",\n                \"shield:GetSubscriptionState\",\n                \"shield:DescribeProtection\",\n                \"shield:CreateProtection\",\n                \"shield:DeleteProtection\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:AuthorizeSecurityGroupIngress\",\n                \"ec2:RevokeSecurityGroupIngress\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:CreateSecurityGroup\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:CreateTags\"\n            ],\n            \"Resource\": \"arn:aws:ec2:*:*:security-group/*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"ec2:CreateAction\": \"CreateSecurityGroup\"\n                },\n                \"Null\": {\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:CreateTags\",\n                \"ec2:DeleteTags\"\n            ],\n            \"Resource\": \"arn:aws:ec2:*:*:security-group/*\",\n            \"Condition\": {\n                \"Null\": {\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"true\",\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:AuthorizeSecurityGroupIngress\",\n                \"ec2:RevokeSecurityGroupIngress\",\n                \"ec2:DeleteSecurityGroup\"\n            ],\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"Null\": {\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:CreateLoadBalancer\",\n                \"elasticloadbalancing:CreateTargetGroup\"\n            ],\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"Null\": {\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:CreateListener\",\n                \"elasticloadbalancing:DeleteListener\",\n                \"elasticloadbalancing:CreateRule\",\n                \"elasticloadbalancing:DeleteRule\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:AddTags\",\n                \"elasticloadbalancing:RemoveTags\"\n            ],\n            \"Resource\": [\n                \"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*\"\n            ],\n            \"Condition\": {\n                \"Null\": {\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"true\",\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:AddTags\",\n                \"elasticloadbalancing:RemoveTags\"\n            ],\n            \"Resource\": [\n                \"arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:ModifyLoadBalancerAttributes\",\n                \"elasticloadbalancing:SetIpAddressType\",\n                \"elasticloadbalancing:SetSecurityGroups\",\n                \"elasticloadbalancing:SetSubnets\",\n                \"elasticloadbalancing:DeleteLoadBalancer\",\n                \"elasticloadbalancing:ModifyTargetGroup\",\n                \"elasticloadbalancing:ModifyTargetGroupAttributes\",\n                \"elasticloadbalancing:DeleteTargetGroup\",\n                \"elasticloadbalancing:ModifyListenerAttributes\",\n                \"elasticloadbalancing:ModifyCapacityReservation\",\n                \"elasticloadbalancing:ModifyIpPools\"\n            ],\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"Null\": {\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:AddTags\"\n            ],\n            \"Resource\": [\n                \"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*\"\n            ],\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"elasticloadbalancing:CreateAction\": [\n                        \"CreateTargetGroup\",\n                        \"CreateLoadBalancer\"\n                    ]\n                },\n                \"Null\": {\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:RegisterTargets\",\n                \"elasticloadbalancing:DeregisterTargets\"\n            ],\n            \"Resource\": \"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:SetWebAcl\",\n                \"elasticloadbalancing:ModifyListener\",\n                \"elasticloadbalancing:AddListenerCertificates\",\n                \"elasticloadbalancing:RemoveListenerCertificates\",\n                \"elasticloadbalancing:ModifyRule\",\n                \"elasticloadbalancing:SetRulePriorities\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n})\n}\n"}}}}]}, {"ruleId": "CKV_AWS_355", "ruleIndex": 11, "level": "error", "attachments": [], "message": {"text": "Ensure no IAM policies documents allow \"*\" as a statement's resource for restrictable actions"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/4_alb_ingress_controller.tf"}, "region": {"startLine": 2, "endLine": 257, "snippet": {"text": "resource \"aws_iam_role_policy\" \"eks_alb_ingress_policy\" {\n  name        = \"${var.project}-${var.environment}-eks-alb-ingress-policy\"\n  role = aws_iam_role.eks-alb-ingress-controller.id\n\n  policy = jsonencode({\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:CreateServiceLinkedRole\"\n            ],\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"iam:AWSServiceName\": \"elasticloadbalancing.amazonaws.com\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:DescribeAccountAttributes\",\n                \"ec2:DescribeAddresses\",\n                \"ec2:DescribeAvailabilityZones\",\n                \"ec2:DescribeInternetGateways\",\n                \"ec2:DescribeVpcs\",\n                \"ec2:DescribeVpcPeeringConnections\",\n                \"ec2:DescribeSubnets\",\n                \"ec2:DescribeSecurityGroups\",\n                \"ec2:DescribeInstances\",\n                \"ec2:DescribeNetworkInterfaces\",\n                \"ec2:DescribeTags\",\n                \"ec2:GetCoipPoolUsage\",\n                \"ec2:DescribeCoipPools\",\n                \"ec2:GetSecurityGroupsForVpc\",\n                \"ec2:DescribeIpamPools\",\n                \"ec2:DescribeRouteTables\",\n                \"elasticloadbalancing:DescribeLoadBalancers\",\n                \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n                \"elasticloadbalancing:DescribeListeners\",\n                \"elasticloadbalancing:DescribeListenerCertificates\",\n                \"elasticloadbalancing:DescribeSSLPolicies\",\n                \"elasticloadbalancing:DescribeRules\",\n                \"elasticloadbalancing:DescribeTargetGroups\",\n                \"elasticloadbalancing:DescribeTargetGroupAttributes\",\n                \"elasticloadbalancing:DescribeTargetHealth\",\n                \"elasticloadbalancing:DescribeTags\",\n                \"elasticloadbalancing:DescribeTrustStores\",\n                \"elasticloadbalancing:DescribeListenerAttributes\",\n                \"elasticloadbalancing:DescribeCapacityReservation\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cognito-idp:DescribeUserPoolClient\",\n                \"acm:ListCertificates\",\n                \"acm:DescribeCertificate\",\n                \"iam:ListServerCertificates\",\n                \"iam:GetServerCertificate\",\n                \"waf-regional:GetWebACL\",\n                \"waf-regional:GetWebACLForResource\",\n                \"waf-regional:AssociateWebACL\",\n                \"waf-regional:DisassociateWebACL\",\n                \"wafv2:GetWebACL\",\n                \"wafv2:GetWebACLForResource\",\n                \"wafv2:AssociateWebACL\",\n                \"wafv2:DisassociateWebACL\",\n                \"shield:GetSubscriptionState\",\n                \"shield:DescribeProtection\",\n                \"shield:CreateProtection\",\n                \"shield:DeleteProtection\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:AuthorizeSecurityGroupIngress\",\n                \"ec2:RevokeSecurityGroupIngress\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:CreateSecurityGroup\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:CreateTags\"\n            ],\n            \"Resource\": \"arn:aws:ec2:*:*:security-group/*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"ec2:CreateAction\": \"CreateSecurityGroup\"\n                },\n                \"Null\": {\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:CreateTags\",\n                \"ec2:DeleteTags\"\n            ],\n            \"Resource\": \"arn:aws:ec2:*:*:security-group/*\",\n            \"Condition\": {\n                \"Null\": {\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"true\",\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:AuthorizeSecurityGroupIngress\",\n                \"ec2:RevokeSecurityGroupIngress\",\n                \"ec2:DeleteSecurityGroup\"\n            ],\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"Null\": {\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:CreateLoadBalancer\",\n                \"elasticloadbalancing:CreateTargetGroup\"\n            ],\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"Null\": {\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:CreateListener\",\n                \"elasticloadbalancing:DeleteListener\",\n                \"elasticloadbalancing:CreateRule\",\n                \"elasticloadbalancing:DeleteRule\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:AddTags\",\n                \"elasticloadbalancing:RemoveTags\"\n            ],\n            \"Resource\": [\n                \"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*\"\n            ],\n            \"Condition\": {\n                \"Null\": {\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"true\",\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:AddTags\",\n                \"elasticloadbalancing:RemoveTags\"\n            ],\n            \"Resource\": [\n                \"arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:ModifyLoadBalancerAttributes\",\n                \"elasticloadbalancing:SetIpAddressType\",\n                \"elasticloadbalancing:SetSecurityGroups\",\n                \"elasticloadbalancing:SetSubnets\",\n                \"elasticloadbalancing:DeleteLoadBalancer\",\n                \"elasticloadbalancing:ModifyTargetGroup\",\n                \"elasticloadbalancing:ModifyTargetGroupAttributes\",\n                \"elasticloadbalancing:DeleteTargetGroup\",\n                \"elasticloadbalancing:ModifyListenerAttributes\",\n                \"elasticloadbalancing:ModifyCapacityReservation\",\n                \"elasticloadbalancing:ModifyIpPools\"\n            ],\n            \"Resource\": \"*\",\n            \"Condition\": {\n                \"Null\": {\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:AddTags\"\n            ],\n            \"Resource\": [\n                \"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*\",\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*\"\n            ],\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"elasticloadbalancing:CreateAction\": [\n                        \"CreateTargetGroup\",\n                        \"CreateLoadBalancer\"\n                    ]\n                },\n                \"Null\": {\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"false\"\n                }\n            }\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:RegisterTargets\",\n                \"elasticloadbalancing:DeregisterTargets\"\n            ],\n            \"Resource\": \"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"elasticloadbalancing:SetWebAcl\",\n                \"elasticloadbalancing:ModifyListener\",\n                \"elasticloadbalancing:AddListenerCertificates\",\n                \"elasticloadbalancing:RemoveListenerCertificates\",\n                \"elasticloadbalancing:ModifyRule\",\n                \"elasticloadbalancing:SetRulePriorities\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n})\n}\n"}}}}]}, {"ruleId": "CKV_TF_1", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure Terraform module sources use a commit hash"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/5_karpenter.tf"}, "region": {"startLine": 1, "endLine": 15, "snippet": {"text": "module \"karpenter\" {\n  source = \"terraform-aws-modules/eks/aws//modules/karpenter\"\n  version = \"20.36.1\"\n  cluster_name = module.eks.cluster_name\n\n  enable_v1_permissions = true\n\n  enable_pod_identity             = true\n  create_pod_identity_association = true\n\n  # Attach additional IAM policies to the Karpenter node IAM role\n  node_iam_role_additional_policies = {\n    AmazonSSMManagedInstanceCore = \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 12, "level": "error", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/main.tf"}, "region": {"startLine": 291, "endLine": 308, "snippet": {"text": "resource \"aws_security_group\" \"cluster\" {\n  count = local.create_cluster_sg ? 1 : 0\n\n  name        = var.cluster_security_group_use_name_prefix ? null : local.cluster_sg_name\n  name_prefix = var.cluster_security_group_use_name_prefix ? \"${local.cluster_sg_name}${var.prefix_separator}\" : null\n  description = var.cluster_security_group_description\n  vpc_id      = var.vpc_id\n\n  tags = merge(\n    var.tags,\n    { \"Name\" = local.cluster_sg_name },\n    var.cluster_security_group_tags\n  )\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 12, "level": "error", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-eks/c60b70fbc80606eb4ed8cf47063ac6ed0d8dd435/node_groups.tf"}, "region": {"startLine": 208, "endLine": 228, "snippet": {"text": "resource \"aws_security_group\" \"node\" {\n  count = local.create_node_sg ? 1 : 0\n\n  name        = var.node_security_group_use_name_prefix ? null : local.node_sg_name\n  name_prefix = var.node_security_group_use_name_prefix ? \"${local.node_sg_name}${var.prefix_separator}\" : null\n  description = var.node_security_group_description\n  vpc_id      = var.vpc_id\n\n  tags = merge(\n    var.tags,\n    {\n      \"Name\"                                      = local.node_sg_name\n      \"kubernetes.io/cluster/${var.cluster_name}\" = \"owned\"\n    },\n    var.node_security_group_tags\n  )\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_11", "ruleIndex": 13, "level": "error", "attachments": [], "message": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-vpc/e226cc15a7b8f62fd0e108792fea66fa85bcb4b9/main.tf"}, "region": {"startLine": 28, "endLine": 51, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_19", "ruleIndex": 14, "level": "error", "attachments": [], "message": {"text": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-vpc/e226cc15a7b8f62fd0e108792fea66fa85bcb4b9/main.tf"}, "region": {"startLine": 1059, "endLine": 1076, "snippet": {"text": "resource \"aws_eip\" \"nat\" {\n  count = local.create_vpc && var.enable_nat_gateway && !var.reuse_nat_ips ? local.nat_gateway_count : 0\n\n  domain = \"vpc\"\n\n  tags = merge(\n    {\n      \"Name\" = format(\n        \"${var.name}-%s\",\n        element(var.azs, var.single_nat_gateway ? 0 : count.index),\n      )\n    },\n    var.tags,\n    var.nat_eip_tags,\n  )\n\n  depends_on = [aws_internet_gateway.this]\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 15, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "modules/vpc-eks/.external_modules/github.com/terraform-aws-modules/terraform-aws-vpc/e226cc15a7b8f62fd0e108792fea66fa85bcb4b9/main.tf"}, "region": {"startLine": 28, "endLine": 51, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}]}]}